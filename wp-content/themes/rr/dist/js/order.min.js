"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new i($(this))}),$.each($(".plans"),function(){new s($(this))})});var t=function(t){var n=this,i=t,s=i,o=$(window),a=(o.width(),function(){o.on({resize:function(){h(),e()},load:function(){e()},scroll:function(){e()}})}),e=function(){var t,n=i.offset().top,s=n-o.height(),a=n+i.height(),e=(a-o.scrollTop())/(a-s);e>1?t=0:e<0&&(t=1),e<1&&e>0&&(t=1-e),i.hasClass("putted-all")&&(t=.5),r(s,a,t)},r=function(t,n,i){s.each(function(){var t=$(this),n=100,s=1;t.hasClass("clouds_1")&&(s=-1),0==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):1==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):(i>=.5&&(i=1-i),t.css({"-webkit-transform":"translateX("+200*i*s+"%)",transform:"translateX("+200*i*s+"%)"}))})},h=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},f=function(){i[0].obj=n,a(),h()};f()},n=function(t){var n=this,i=t,s=i.find(".guy__hand"),o=$(window),a=o.width(),e=function(){o.on({resize:function(){a!=o.width()&&(a=o.width()+1,o.width()<768&&s.css({"-webkit-transform":"none",transform:"none"})),f(),h(),r()},load:function(){o.width()>=768&&r()},scroll:function(){o.width()>=768&&r()}})},r=function(){var t,n=o.height(),a=i.offset().top,e=s.offset().top-n,r=a-n+i.height();i.hasClass("putted")&&(e=s.offset().top-n/2,r=n/2.5);var h=(r-o.scrollTop())/(r-e);h>1?t=0:h<0&&(t=1),h<1&&h>0&&(t=1-h),i.hasClass("putted-all")&&(t=1),c(e,r,t)},h=function(){var t=o.height(),n=o.scrollTop(),a=s.height(),e=s.offset().top;a+e<t+n&&$(".site").height()>2*t?i.addClass("putted"):i.removeClass("putted")},f=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},c=function(t,n,i){var a=n-t;s.each(function(){var n=$(this),s=n.data("rotate-start"),e=n.data("rotate-finish"),r=s+(e-s)/a*(o.scrollTop()-t);1==i?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):0==i?n.css({"-webkit-transform":"rotate( "+-s+"deg )",transform:"rotate( "+-s+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},u=function(){i[0].obj=n,e(),h(),f()};u()},i=function(t){var n=this,i=t,s=$(window),o=$(".site__header"),a=function(){s.on({resize:function(){e()}})},e=function(){var t=o.height();i.height(s.height()-t),i.css({"min-height":i.find(">div:first").height()})},r=function(){i[0].obj=n,a(),e()};r()},s=function(t){var n=this,i=t,s=$(window),o=i.find(".plans__list_caption"),a=i.find(".plans__list-row:not(.plans__list_caption)"),e=[],r=[],h=function(){s.on({load:function(){s.width()>=768&&f()},resize:function(){s.width()<768?(o.css({height:""}),a.css({height:""})):f()}})},f=function(){e=[],r=[],o.each(function(){var t=$(this).innerHeight();e.push(t)});var t=Math.max.apply(Math,e);a.each(function(){var t=$(this).innerHeight();r.push(t)});var n=Math.max.apply(Math,r);o.innerHeight(t),a.innerHeight(n)},c=function(){i[0].obj=n,h()};c()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new e($(this))})});var t=function(t){var e=this,a=t,n=a.find(".choose-data__items"),o=n.find("input"),i=a.find(".btn_next"),r={},s={},c=function(){o.on({click:function(){l($(this)),u()}}),i.on({click:function(){var t=$(this),e=t.data("src");return window.location.href=e,!1}})},l=function(t){var e=t;"radio"===e.attr("type")?e.parents(".plans").length?r.ratePlan={sessionType:e.data("rate"),value:e.attr("value")}:r[e.attr("name")]=e.attr("value"):"checkbox"===e.attr("type")&&(e.is(":checked")?s[e.attr("name")]=e.attr("value"):delete s[e.attr("name")])},h=function(){o.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?r.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:r[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")]))}),u()},u=function(){localStorage.setItem("radioChoose",JSON.stringify(r)),localStorage.setItem("checkboxChoose",JSON.stringify(s))},d=function(){a[0].obj=e,c(),h()};d()},e=function(t){var e,a,n=this,o=t,i=o.find(".order__chosen-data span"),r=o.find('input[type="hidden"]'),s=[],c=function(){},l=function(){var t="",n="",o=[];for(var c in e)var l=e[c];void 0!=e.ratePlan&&$.each(e.ratePlan,function(){var a=e.ratePlan.value.split(" ");"session pricing"===e.ratePlan.sessionType?t="<span>"+e.ratePlan.sessionType+" ( "+a[0]+" sessions )</span>":"minute pricing"===e.ratePlan.sessionType&&(t="<span>"+e.ratePlan.sessionType+" ( "+a[0]+" minutes ( "+a[2]+"/minute )</span>")});for(var h in a){e[h];o.push(h)}o.length>0&&(n=1==o.length?"+ "+o.length+" service":"+ "+o.length+" service"),i.html("You chose "+t+", "+l+" "+n+")."),r.val(s)},h=function(){s=[],s.push(" "+e),s.push(" "+a),r.val(s)},u=function(){void 0!=localStorage.radioChoose?(e=JSON.parse(localStorage.radioChoose),a=JSON.parse(localStorage.checkboxChoose),h(),l()):window.location.href=$("body").data("src")},d=function(){o[0].obj=n,c(),u()};d()}}();
!function(){$(function(){"use strict";$.each($(".order__place"),function(){new t($(this))})});var t=function(t){var n=this,i=t,a=i.find("form"),e=i.find('input[data-required="required"], textarea[data-required="required"], input[aria-required="true"], textarea[aria-required="true"]'),o=i.find('input[data-validation="valid"]'),s=function(){u(),i[0].obj=n},r=function(){e.each(function(){""===$(this).val()&&$(this).addClass("not-touched")}),o.each(function(){l($(this))})},u=function(){a.on({submit:function(){return r(),e.hasClass("not-touched")?(i.find(".not-touched:first").focus(),!1):!o.hasClass("not-valid")||(i.find(".not-valid:first").focus(),!1)}}),e.on({keypress:function(){$(this).removeClass("not-touched")}}),o.on({keyup:function(){l($(this))}})},d=function(t){t.addClass("not-valid"),t.removeClass("valid")},c=function(t){t.removeClass("not-valid"),t.addClass("valid")},f=function(t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(t)},l=function(t,n){var i=t.attr("type");t.attr("class");return"email"!==i||f(t.val())?void c(t):(d(t),!1)};n.checkValid=function(){var t=!0;return _fields.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(t=!1)}),t},s()}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LmNoZWNrb3V0LmpzIiwianF1ZXJ5LmZvcm0udmFsaWRhdG9yLmpzIl0sIm5hbWVzIjpbIiQiLCJlYWNoIiwiQ2xvdWRzQW5pbWF0ZWQiLCJ0aGlzIiwiR3V5QW5pbWF0ZWQiLCJDb250ZW50RnVsbEhlaWdodCIsIlBsYW5zQ2hvb3NlSGVpZ2h0Iiwib2JqIiwiX3NlbGYiLCJfb2JqIiwiX2l0ZW1zIiwiX3dpbmRvdyIsIndpbmRvdyIsIl9hZGRFdmVudHMiLCJ3aWR0aCIsIm9uIiwicmVzaXplIiwiX2NoZWNrUHV0SW5XaW5kb3ciLCJfY2hlY2tTY3JvbGwiLCJsb2FkIiwic2Nyb2xsIiwic2Nyb2xsUG9pbnQiLCJ0b3BQb3MiLCJvZmZzZXQiLCJ0b3AiLCJzdGFydCIsImhlaWdodCIsImVuZCIsIngiLCJzY3JvbGxUb3AiLCJoYXNDbGFzcyIsIl9hbmltYXRpb25FbGVtcyIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImN1ckVsZW0iLCJ0cmFuc2xhdGVGaW5pc2giLCJjc3MiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImhlaWdodFdpbiIsImhlaWdodFNpdGUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiX2luaXQiLCJfaGFuZCIsImZpbmQiLCJfZ2xvYmFsV2lkdGgiLCJfY2hlY2tHZXRJbldpbmRvdyIsIndpbmRvd0giLCJzY3JvbGxUb3BXaW4iLCJoZWlnaHRPYmoiLCJwb3NpdGlvbk9iaiIsInNlZ21lbnQiLCJyb3RhdGVTdGFydCIsImRhdGEiLCJyb3RhdGVGaW5pc2giLCJrb2ZSb3RhdGUiLCJfaGVhZGVyIiwiX3NldEhlaWdodCIsImhlYWRlckhlaWd0aCIsIm1pbi1oZWlnaHQiLCJfY2FwdGlvbiIsIl9jb250ZW50IiwiX2NhcHRpb25IZWlnaHRzIiwiX2NvbnRlbnRIZWlnaHRzIiwiaW5uZXJIZWlnaHQiLCJwdXNoIiwibWF4SGVpZ2h0Q2FwdGlvbiIsIk1hdGgiLCJtYXgiLCJhcHBseSIsIm1heEhlaWdodENvbnRlbnQiLCJDaG9vc2VEYXRhIiwiUGFzdGVEYXRhIiwiX2lucHV0IiwiX3JlZGlyZWN0QnRuIiwiX2RhdGFSYWRpbyIsIl9kYXRhQ2hlY2tib3giLCJjbGljayIsIl9nZXREYXRhIiwiX3dyaXRlSW5TZXNzaW9uU3RvcmFnZSIsImN1ckl0ZW0iLCJkYXRhU3JjIiwibG9jYXRpb24iLCJocmVmIiwiZWxlbSIsImF0dHIiLCJwYXJlbnRzIiwibGVuZ3RoIiwicmF0ZVBsYW4iLCJzZXNzaW9uVHlwZSIsInZhbHVlIiwiaXMiLCJfd3JpdGVEYXRhSW5PYmpBZnRlckxvYWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9jaG9zZW5EYXRhIiwiX2FyciIsIl93cml0ZUluQmxvY2siLCJkaXZSYXRlIiwibnVtIiwiYXJyIiwia2V5IiwiaXRlbSIsInVuZGVmaW5lZCIsInNwbGl0Iiwia2V5MSIsImh0bWwiLCJ2YWwiLCJfd3JpdGVJblNlYXJjaCIsIl9nZXRTZXNzaW9uRGF0YSIsInJhZGlvQ2hvb3NlIiwicGFyc2UiLCJjaGVja2JveENob29zZSIsIkZvcm1WYWxpZGF0b3IiLCJfZm9ybSIsIl9maWVsZHNSZXF1aXJlZCIsIl92YWxpZEZpZWxkIiwiX2NvbnN0cnVjdG9yIiwiX29uRXZlbnRzIiwiX2FkZE5vdFRvdWNoZWRDbGFzcyIsIl92YWxpZGF0ZUZpZWxkIiwic3VibWl0IiwiZm9jdXMiLCJrZXlwcmVzcyIsImtleXVwIiwiX21ha2VOb3RWYWxpZCIsImZpZWxkIiwiX21ha2VWYWxpZCIsIl92YWxpZGF0ZUVtYWlsIiwiZW1haWwiLCJyZSIsInRlc3QiLCJlIiwidHlwZSIsImNoZWNrVmFsaWQiLCJ2YWxpZCIsIl9maWVsZHMiXSwibWFwcGluZ3MiOiJBQUFBLGNBQ0EsV0FFSUEsRUFBRyxXQUVDQSxFQUFFQyxLQUFNRCxFQUFFLFdBQVksV0FFbEIsR0FBSUUsR0FBZ0JGLEVBQUVHLFNBSTFCSCxFQUFFQyxLQUFNRCxFQUFFLFFB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SCxFQUFnQjNILEVBQUdHLFVBSzNCc0gsRUFBWSxXQUVSSixFQUFNdEcsSUFDRjZHLE9BQVEsV0FJSixNQUZBRixLQUVJSixFQUFnQnhGLFNBQVMsZ0JBRXpCckIsRUFBS29DLEtBQUssc0JBQXNCZ0YsU0FFekIsSUFHTE4sRUFBWXpGLFNBQVMsZUFFdkJyQixFQUFLb0MsS0FBSyxvQkFBb0JnRixTQUV2QixNQVluQlAsRUFBZ0J2RyxJQUNaK0csU0FBVSxXQUVOOUgsRUFBRUcsTUFBTXVDLFlBQWEsa0JBSzdCNkUsRUFBWXhHLElBQ1JnSCxNQUFPLFdBRUhKLEVBQWdCM0gsRUFBR0csV0FLL0I2SCxFQUFnQixTQUFXQyxHQUN2QkEsRUFBTXhGLFNBQVUsYUFDaEJ3RixFQUFNdkYsWUFBYSxVQUV2QndGLEVBQWEsU0FBV0QsR0FDcEJBLEVBQU12RixZQUFhLGFBQ25CdUYsRUFBTXhGLFNBQVUsVUFFcEIwRixFQUFpQixTQUFXQyxHQUN4QixHQUFJQyxHQUFLLHdKQUNULE9BQU9BLEdBQUdDLEtBQUtGLElBTW5CVCxFQUFpQixTQUFXTSxFQUFPTSxHQUUvQixHQUFJQyxHQUFPUCxFQUFNM0MsS0FBTSxPQUNQMkMsR0FBTTNDLEtBQU0sUUFXNUIsT0FBYSxVQUFUa0QsR0FDS0wsRUFBZ0JGLEVBQU1uQixXQW1CL0JvQixHQUFZRCxJQWxCSkQsRUFBZUMsSUFDUixHQXdCdkJ6SCxHQUFNaUksV0FBYSxXQUNmLEdBQUlDLElBQVEsQ0FVWixPQVJBQyxTQUFRMUksS0FBTSxXQUNWRCxFQUFHRyxNQUFPdUMsWUFBYSxlQUNuQjFDLEVBQUdHLE1BQU8yQixTQUFVLGVBQ3BCNEcsR0FBUSxLQUtUQSxHQUdYbEIiLCJmaWxlIjoib3JkZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuY2xvdWRzJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IENsb3Vkc0FuaW1hdGVkKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLmd1eScpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBHdXlBbmltYXRlZCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5zaXRlX19jb250ZW50X2Z1bGwnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgQ29udGVudEZ1bGxIZWlnaHQoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcucGxhbnMnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgUGxhbnNDaG9vc2VIZWlnaHQoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgQ2xvdWRzQW5pbWF0ZWQgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaXRlbXMgPSBfb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGVja1Njcm9sbCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9wUG9zID0gX29iai5vZmZzZXQoKS50b3AgLFxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRvcFBvcyAtIF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHRvcFBvcyArIF9vYmouaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50O1xuXG4gICAgICAgICAgICAgICAgdmFyIHggPSAoIGVuZCAtIF93aW5kb3cuc2Nyb2xsVG9wKCkgKSAvICggZW5kIC0gIHN0YXJ0ICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHggPiAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMDtcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggeCA8IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAxO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoICggeCA8IDEgKSAmJiAoIHggPiAwICkgKXtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDEgLSB4O1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCAgX29iai5oYXNDbGFzcygncHV0dGVkLWFsbCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMC41O1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2FuaW1hdGlvbkVsZW1zKCBzdGFydCwgZW5kLCBzY3JvbGxQb2ludCApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FuaW1hdGlvbkVsZW1zID0gZnVuY3Rpb24gKCBzdGFydFBvaW50LCBlbmRQb2ludCwgc2Nyb2xsUG9pbnQgKSB7XG5cbiAgICAgICAgICAgICAgICBfaXRlbXMuZWFjaCggZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJFbGVtID0gJCggdGhpcyApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlU3RhcnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlRmluaXNoID0gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckVsZW0uaGFzQ2xhc3MoJ2Nsb3Vkc18xJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAtMTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzY3JvbGxQb2ludCA9PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCAtdHJhbnNsYXRlRmluaXNoICogeCApKyAnJSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIC10cmFuc2xhdGVGaW5pc2ggKiB4ICkrICclKSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNjcm9sbFBvaW50ID09IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uY3NzKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIC10cmFuc2xhdGVGaW5pc2ggKiB4ICkrICclKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggLXRyYW5zbGF0ZUZpbmlzaCAqIHggKSsgJyUpJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCBzY3JvbGxQb2ludCA8IDAuNSAmJiBzY3JvbGxQb2ludCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgY3VyRWxlbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCBzY3JvbGxQb2ludCAqIDIwMCAqIHggKSsgJyUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCBzY3JvbGxQb2ludCAqIDIwMCAqIHggKSsgJyUpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiggc2Nyb2xsUG9pbnQgPj0gMC41ICYmIHNjcm9sbFBvaW50IDwgMC44ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGN1ckVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggdHJhbnNsYXRlRmluaXNoICogeCApKyAnJSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIHRyYW5zbGF0ZUZpbmlzaCAqIHggKSsgJyUpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCBzY3JvbGxQb2ludCA+PSAwLjggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgc2Nyb2xsUG9pbnQgPSAxLjMgLSBzY3JvbGxQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjdXJFbGVtLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIHNjcm9sbFBvaW50ICogMjAwICogeCApKyAnJSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIHNjcm9sbFBvaW50ICogMjAwICogeCApKyAnJSknXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc2Nyb2xsUG9pbnQgPj0gMC41ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAxIC0gc2Nyb2xsUG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggc2Nyb2xsUG9pbnQgKiAyMDAgKiB4ICkrICclKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggc2Nyb2xsUG9pbnQgKiAyMDAgKiB4ICkrICclKSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3cgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHRXaW4gPSBfd2luZG93LmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRTaXRlID0gJCgnLnNpdGUnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIGlmKCBoZWlnaHRTaXRlIDw9IGhlaWdodFdpbiApIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCdwdXR0ZWQtYWxsJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoJ3B1dHRlZC1hbGwnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3coKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgR3V5QW5pbWF0ZWQgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaGFuZCA9IF9vYmouZmluZCgnLmd1eV9faGFuZCcpLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxXaWR0aCAhPSBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2lkdGggPSBfd2luZG93LndpZHRoKCkgKyAxO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYW5kLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja0dldEluV2luZG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3dpbmRvdy53aWR0aCgpID49IDc2OCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd2luZG93SCA9IF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHRvcFBvcyA9IF9vYmoub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IF9oYW5kLm9mZnNldCgpLnRvcCAtIHdpbmRvd0gsXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHRvcFBvcyAtIHdpbmRvd0ggKyBfb2JqLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludDtcblxuICAgICAgICAgICAgICAgIGlmKCAgX29iai5oYXNDbGFzcygncHV0dGVkJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBfaGFuZC5vZmZzZXQoKS50b3AgLSB3aW5kb3dILzI7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHdpbmRvd0gvMi41O1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHggPSAoIGVuZCAtIF93aW5kb3cuc2Nyb2xsVG9wKCkgKSAvICggZW5kIC0gIHN0YXJ0ICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHggPiAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMDtcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggeCA8IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAxO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoICggeCA8IDEgKSAmJiAoIHggPiAwICkgKXtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDEgLSB4O1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCAgX29iai5oYXNDbGFzcygncHV0dGVkLWFsbCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMTtcblxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgX2FuaW1hdGlvbkVsZW1zKCBzdGFydCwgZW5kLCBzY3JvbGxQb2ludCApO1xuXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tHZXRJbldpbmRvdyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodFdpbiA9IF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcFdpbiA9X3dpbmRvdy5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0T2JqID0gX2hhbmQuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uT2JqID0gX2hhbmQub2Zmc2V0KCkudG9wO1xuXG4gICAgICAgICAgICAgICAgaWYoICggaGVpZ2h0T2JqICsgcG9zaXRpb25PYmogPCBoZWlnaHRXaW4gKyBzY3JvbGxUb3BXaW4gKSAmJiAkKCcuc2l0ZScpLmhlaWdodCgpID4gaGVpZ2h0V2luICogMiAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcygncHV0dGVkJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoJ3B1dHRlZCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3cgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHRXaW4gPSBfd2luZG93LmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRTaXRlID0gJCgnLnNpdGUnKS5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgIGlmKCBoZWlnaHRTaXRlIDw9IGhlaWdodFdpbiApIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCdwdXR0ZWQtYWxsJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoJ3B1dHRlZC1hbGwnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hbmltYXRpb25FbGVtcyA9IGZ1bmN0aW9uICggc3RhcnRQb2ludCwgZW5kUG9pbnQsIHNjcm9sbFBvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlZ21lbnQgPSBlbmRQb2ludCAtIHN0YXJ0UG9pbnQ7XG5cbiAgICAgICAgICAgICAgICBfaGFuZC5lYWNoKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckVsZW0gPSAkKCB0aGlzICksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVTdGFydCA9IGN1ckVsZW0uZGF0YSgncm90YXRlLXN0YXJ0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVGaW5pc2ggPSBjdXJFbGVtLmRhdGEoJ3JvdGF0ZS1maW5pc2gnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvZlJvdGF0ZSA9IHJvdGF0ZVN0YXJ0ICsgKCByb3RhdGVGaW5pc2ggLSByb3RhdGVTdGFydCApIC8gc2VnbWVudCAqICggX3dpbmRvdy5zY3JvbGxUb3AoKSAtIHN0YXJ0UG9pbnQgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNjcm9sbFBvaW50ID09IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAtcm90YXRlRmluaXNoICkgKydkZWcgKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICdyb3RhdGUoICcrICggLXJvdGF0ZUZpbmlzaCApICsnZGVnICknXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vX29iai5yZW1vdmVDbGFzcygncHV0dGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc2Nyb2xsUG9pbnQgPT0gMCApIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdyb3RhdGUoICcrICggLXJvdGF0ZVN0YXJ0ICkgKydkZWcgKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICdyb3RhdGUoICcrICggLXJvdGF0ZVN0YXJ0ICkgKydkZWcgKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9fb2JqLnJlbW92ZUNsYXNzKCdwdXR0ZWQnKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAta29mUm90YXRlICkrJ2RlZyApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAta29mUm90YXRlICkgKydkZWcgKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfY2hlY2tHZXRJbldpbmRvdygpO1xuICAgICAgICAgICAgICAgIF9jaGVja1B1dEluV2luZG93KCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIENvbnRlbnRGdWxsSGVpZ2h0ID0gZnVuY3Rpb24gKCBvYmogKSB7XG5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJIZWlndGggPSBfaGVhZGVyLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgX29iai5oZWlnaHQoIF93aW5kb3cuaGVpZ2h0KCkgLSBoZWFkZXJIZWlndGggKTtcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IF9vYmouZmluZCgnPmRpdjpmaXJzdCcpLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgUGxhbnNDaG9vc2VIZWlnaHQgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfY2FwdGlvbiA9IF9vYmouZmluZCgnLnBsYW5zX19saXN0X2NhcHRpb24nKSxcbiAgICAgICAgICAgIF9jb250ZW50ID0gX29iai5maW5kKCcucGxhbnNfX2xpc3Qtcm93Om5vdCgucGxhbnNfX2xpc3RfY2FwdGlvbiknKSxcbiAgICAgICAgICAgIF9jYXB0aW9uSGVpZ2h0cyA9IFtdLFxuICAgICAgICAgICAgX2NvbnRlbnRIZWlnaHRzID0gW107XG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2FwdGlvbi5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGVudC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX2NhcHRpb25IZWlnaHRzID0gW107XG4gICAgICAgICAgICAgICAgX2NvbnRlbnRIZWlnaHRzID0gW107XG5cbiAgICAgICAgICAgICAgICBfY2FwdGlvbi5lYWNoKCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gJCh0aGlzKS5pbm5lckhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF9jYXB0aW9uSGVpZ2h0cy5wdXNoKCBoZWlnaHQgKTtcblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIHZhciBtYXhIZWlnaHRDYXB0aW9uID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX2NhcHRpb25IZWlnaHRzKTtcblxuXG4gICAgICAgICAgICAgICAgX2NvbnRlbnQuZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9ICQodGhpcykuaW5uZXJIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfY29udGVudEhlaWdodHMucHVzaCggaGVpZ2h0ICk7XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWF4SGVpZ2h0Q29udGVudCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF9jb250ZW50SGVpZ2h0cyk7XG5cbiAgICAgICAgICAgICAgICBfY2FwdGlvbi5pbm5lckhlaWdodCggbWF4SGVpZ2h0Q2FwdGlvbiApO1xuICAgICAgICAgICAgICAgIF9jb250ZW50LmlubmVySGVpZ2h0KCBtYXhIZWlnaHRDb250ZW50ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuY2hvb3NlLWRhdGEnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgQ2hvb3NlRGF0YSggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5vcmRlcicpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBQYXN0ZURhdGEoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgQ2hvb3NlRGF0YSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9pdGVtcyA9IF9vYmouZmluZCgnLmNob29zZS1kYXRhX19pdGVtcycpLFxuICAgICAgICAgICAgX2lucHV0ID0gX2l0ZW1zLmZpbmQoJ2lucHV0JyksXG4gICAgICAgICAgICBfcmVkaXJlY3RCdG4gPSBfb2JqLmZpbmQoJy5idG5fbmV4dCcpLFxuICAgICAgICAgICAgX2RhdGFSYWRpbyA9IHt9LFxuICAgICAgICAgICAgX2RhdGFDaGVja2JveCA9IHt9O1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2lucHV0Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dldERhdGEoICQodGhpcykgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZUluU2Vzc2lvblN0b3JhZ2UoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3JlZGlyZWN0QnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTcmMgPSBjdXJJdGVtLmRhdGEoJ3NyYycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRhdGFTcmM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldERhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcblxuICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJyApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5wYXJlbnRzKCcucGxhbnMnKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9kYXRhUmFkaW8ucmF0ZVBsYW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblR5cGU6IGN1ckl0ZW0uZGF0YSgncmF0ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJJdGVtLmF0dHIoJ3ZhbHVlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cigndmFsdWUnKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGN1ckl0ZW0uYXR0cigndHlwZScpID09PSAnY2hlY2tib3gnICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJJdGVtLmlzKFwiOmNoZWNrZWRcIikpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFDaGVja2JveFtjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ3ZhbHVlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9kYXRhQ2hlY2tib3hbY3VySXRlbS5hdHRyKCduYW1lJyldO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlRGF0YUluT2JqQWZ0ZXJMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQuZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmlzKFwiOmNoZWNrZWRcIikgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLnBhcmVudHMoJy5wbGFucycpLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvLnJhdGVQbGFuID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblR5cGU6IGN1ckl0ZW0uZGF0YSgncmF0ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1ckl0ZW0uYXR0cigndmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cigndmFsdWUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ2NoZWNrYm94JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmlzKFwiOmNoZWNrZWRcIikgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFDaGVja2JveFtjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ3ZhbHVlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfZGF0YUNoZWNrYm94W2N1ckl0ZW0uYXR0cignbmFtZScpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3dyaXRlSW5TZXNzaW9uU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlSW5TZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JhZGlvQ2hvb3NlJywgSlNPTi5zdHJpbmdpZnkoX2RhdGFSYWRpbykpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjaGVja2JveENob29zZScsIEpTT04uc3RyaW5naWZ5KF9kYXRhQ2hlY2tib3gpKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgX3dyaXRlRGF0YUluT2JqQWZ0ZXJMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFBhc3RlRGF0YSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9jaG9zZW5EYXRhID0gX29iai5maW5kKCcub3JkZXJfX2Nob3Nlbi1kYXRhIHNwYW4nKSxcbiAgICAgICAgICAgIF9kYXRhUmFkaW8sXG4gICAgICAgICAgICBfZGF0YUNoZWNrYm94LFxuICAgICAgICAgICAgX2lucHV0ID0gX29iai5maW5kKCdpbnB1dFt0eXBlPVwiaGlkZGVuXCJdJyksXG4gICAgICAgICAgICBfYXJyID0gW10sXG4gICAgICAgICAgICBfYXJyMSA9IFtdO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF93cml0ZUluQmxvY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkaXZSYXRlID0gJycsXG4gICAgICAgICAgICAgICAgICAgIG51bSA9ICcnLFxuICAgICAgICAgICAgICAgICAgICBhcnIgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciggdmFyIGtleSBpbiBfZGF0YVJhZGlvICApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9kYXRhUmFkaW9bIGtleSBdO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIF9kYXRhUmFkaW8ucmF0ZVBsYW4gIT0gdW5kZWZpbmVkICkge1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCggX2RhdGFSYWRpby5yYXRlUGxhbiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9kYXRhUmFkaW8ucmF0ZVBsYW4udmFsdWUuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9kYXRhUmFkaW8ucmF0ZVBsYW4uc2Vzc2lvblR5cGUgPT09ICdzZXNzaW9uIHByaWNpbmcnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2UmF0ZSA9ICc8c3Bhbj4nKyBfZGF0YVJhZGlvLnJhdGVQbGFuLnNlc3Npb25UeXBlICsnICggJysgdmFsdWVbMF0gKycgc2Vzc2lvbnMgKTwvc3Bhbj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9kYXRhUmFkaW8ucmF0ZVBsYW4uc2Vzc2lvblR5cGUgPT09ICdtaW51dGUgcHJpY2luZycgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXZSYXRlID0gJzxzcGFuPicrIF9kYXRhUmFkaW8ucmF0ZVBsYW4uc2Vzc2lvblR5cGUgKycgKCAnKyB2YWx1ZVswXSArJyBtaW51dGVzICggJyArIHZhbHVlWzJdICsgJy9taW51dGUgKTwvc3Bhbj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IoIHZhciBrZXkxIGluIF9kYXRhQ2hlY2tib3ggICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtMSA9IF9kYXRhUmFkaW9bIGtleTFdO1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChrZXkxKVxuXG4gICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgICAgIGlmKCBhcnIubGVuZ3RoID4gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggYXJyLmxlbmd0aCA9PSAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBudW0gPSAnKyAnICsgYXJyLmxlbmd0aCArICcgc2VydmljZSc7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtID0gJysgJyArIGFyci5sZW5ndGggKyAnIHNlcnZpY2UnO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jaG9zZW5EYXRhLmh0bWwoJ1lvdSBjaG9zZSAnICsgZGl2UmF0ZSArICcsICcgKyBpdGVtICsgJyAnICsgbnVtICsgJykuJyk7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfYXJyICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfd3JpdGVJblNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2FyciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgX2Fyci5wdXNoKCAgJyAnICsgX2RhdGFSYWRpbyApO1xuICAgICAgICAgICAgICAgIF9hcnIucHVzaCggICcgJyArIF9kYXRhQ2hlY2tib3ggKTtcblxuICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIF9hcnIgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9nZXRTZXNzaW9uRGF0YSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIGxvY2FsU3RvcmFnZS5yYWRpb0Nob29zZSAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2RhdGFSYWRpbyA9IEpTT04ucGFyc2UoIGxvY2FsU3RvcmFnZS5yYWRpb0Nob29zZSApO1xuICAgICAgICAgICAgICAgICAgICBfZGF0YUNoZWNrYm94ID0gSlNPTi5wYXJzZSggbG9jYWxTdG9yYWdlLmNoZWNrYm94Q2hvb3NlICk7XG5cbiAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5TZWFyY2goKTtcbiAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5CbG9jaygpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICQoJ2JvZHknKS5kYXRhKCdzcmMnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9nZXRTZXNzaW9uRGF0YSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpO1xuIiwiKCBmdW5jdGlvbigpIHtcblxuICAgICQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcub3JkZXJfX3BsYWNlJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEZvcm1WYWxpZGF0b3IoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cblxuICAgIH0gKTtcblxuICAgIHZhciBGb3JtVmFsaWRhdG9yID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2Zvcm0gPSAgX29iai5maW5kKCdmb3JtJyksXG4gICAgICAgICAgICBfZmllbGRzUmVxdWlyZWQgPSBfb2JqLmZpbmQoJ2lucHV0W2RhdGEtcmVxdWlyZWQ9XCJyZXF1aXJlZFwiXSwgdGV4dGFyZWFbZGF0YS1yZXF1aXJlZD1cInJlcXVpcmVkXCJdLCBpbnB1dFthcmlhLXJlcXVpcmVkPVwidHJ1ZVwiXSwgdGV4dGFyZWFbYXJpYS1yZXF1aXJlZD1cInRydWVcIl0nKSxcbiAgICAgICAgICAgIF92YWxpZEZpZWxkID0gX29iai5maW5kKCdpbnB1dFtkYXRhLXZhbGlkYXRpb249XCJ2YWxpZFwiXScpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhclxuICAgICAgICAgICAgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZE5vdFRvdWNoZWRDbGFzcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9maWVsZHNSZXF1aXJlZC5lYWNoKCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggJCh0aGlzKS52YWwoKSA9PT0gJycgKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyggJ25vdC10b3VjaGVkJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfdmFsaWRGaWVsZC5lYWNoKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoICQoIHRoaXMgKSApO1xuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2Zvcm0ub24oIHtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0OiBmdW5jdGlvbiggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9maWVsZHNSZXF1aXJlZC5oYXNDbGFzcygnbm90LXRvdWNoZWQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLm5vdC10b3VjaGVkOmZpcnN0JykuZm9jdXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGlmKCBfdmFsaWRGaWVsZC5oYXNDbGFzcygnbm90LXZhbGlkJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5ub3QtdmFsaWQ6Zmlyc3QnKS5mb2N1cygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfZmllbGRzUmVxdWlyZWQub24oIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF92YWxpZEZpZWxkLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGtleXVwOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoICQoIHRoaXMgKSApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21ha2VOb3RWYWxpZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XG4gICAgICAgICAgICAgICAgZmllbGQuYWRkQ2xhc3MoICdub3QtdmFsaWQnICk7XG4gICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlQ2xhc3MoICd2YWxpZCcgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbWFrZVZhbGlkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcyggJ25vdC12YWxpZCcgKTtcbiAgICAgICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyggJ3ZhbGlkJyApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWxpZGF0ZUVtYWlsID0gZnVuY3Rpb24gKCBlbWFpbCApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmUudGVzdChlbWFpbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbGlkYXRlUGhvbmUgPSBmdW5jdGlvbiAoIHBob25lICkge1xuICAgICAgICAgICAgICAgIHZhciByZSA9IC9eKD86XFwoXFxkezN9XFwpfFxcZHszfSlbLSBdP1xcZHszfVstIF0/XFxkezR9JC87XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlLnRlc3QocGhvbmUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkID0gZnVuY3Rpb24gKCBmaWVsZCwgZSApIHtcblxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZmllbGQuYXR0ciggJ3R5cGUnKSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gZmllbGQuYXR0ciggJ2NsYXNzJyk7XG5cbiAgICAgICAgICAgICAgICAvL2lmKCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICd0ZXh0JyApe1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgaWYoIGZpZWxkLnZhbCgpID09PSAnJyApe1xuICAgICAgICAgICAgICAgIC8vICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2VtYWlsJyApe1xuICAgICAgICAgICAgICAgICAgICBpZiggIV92YWxpZGF0ZUVtYWlsKCBmaWVsZC52YWwoKSApICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiggY2xhc3NOYW1lLmluZGV4T2YoJ3NpdGVfX2lucHV0X3Bob25lJykgKyAxICl7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICBpZiggZmllbGQudmFsKCkgIT0gJycgKSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYoICFfdmFsaWRhdGVQaG9uZSggZmllbGQudmFsKCkgKSApe1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgX21ha2VOb3RWYWxpZCggZmllbGQgKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICBfbWFrZVZhbGlkKCBmaWVsZCApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIF9zZWxmLmNoZWNrVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBfZmllbGRzLmVhY2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcbiAgICAgICAgICAgICAgICBpZiggJCggdGhpcyApLmhhc0NsYXNzKCAnbm90LXZhbGlkJyApICl7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgICAgfTtcblxuICAgICAgICBfY29uc3RydWN0b3IoKTtcbiAgICB9O1xuXG59ICkoKTtcblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
