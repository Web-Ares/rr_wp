"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new i($(this))}),$.each($(".plans"),function(){new s($(this))})});var t=function(t){var n=this,i=t,s=i,o=$(window),a=(o.width(),function(){o.on({resize:function(){h(),e()},load:function(){e()},scroll:function(){e()}})}),e=function(){var t,n=i.offset().top,s=n-o.height(),a=n+i.height(),e=(a-o.scrollTop())/(a-s);e>1?t=0:e<0&&(t=1),e<1&&e>0&&(t=1-e),i.hasClass("putted-all")&&(t=.5),r(s,a,t)},r=function(t,n,i){s.each(function(){var t=$(this),n=100,s=1;t.hasClass("clouds_1")&&(s=-1),0==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):1==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):(i>=.5&&(i=1-i),t.css({"-webkit-transform":"translateX("+200*i*s+"%)",transform:"translateX("+200*i*s+"%)"}))})},h=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},f=function(){i[0].obj=n,a(),h()};f()},n=function(t){var n=this,i=t,s=i.find(".guy__hand"),o=$(window),a=o.width(),e=function(){o.on({resize:function(){a!=o.width()&&(a=o.width()+1,o.width()<768&&s.css({"-webkit-transform":"none",transform:"none"})),f(),h(),r()},load:function(){o.width()>=768&&r()},scroll:function(){o.width()>=768&&r()}})},r=function(){var t,n=o.height(),a=i.offset().top,e=s.offset().top-n,r=a-n+i.height();i.hasClass("putted")&&(e=s.offset().top-n/2,r=n/2.5);var h=(r-o.scrollTop())/(r-e);h>1?t=0:h<0&&(t=1),h<1&&h>0&&(t=1-h),i.hasClass("putted-all")&&(t=1),c(e,r,t)},h=function(){var t=o.height(),n=o.scrollTop(),a=s.height(),e=s.offset().top;a+e<t+n&&$(".site").height()>2*t?i.addClass("putted"):i.removeClass("putted")},f=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},c=function(t,n,i){var a=n-t;s.each(function(){var n=$(this),s=n.data("rotate-start"),e=n.data("rotate-finish"),r=s+(e-s)/a*(o.scrollTop()-t);1==i?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):0==i?n.css({"-webkit-transform":"rotate( "+-s+"deg )",transform:"rotate( "+-s+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},u=function(){i[0].obj=n,e(),h(),f()};u()},i=function(t){var n=this,i=t,s=$(window),o=$(".site__header"),a=function(){s.on({resize:function(){e()}})},e=function(){var t=o.height();i.height(s.height()-t),i.css({"min-height":i.find(">div:first").height()})},r=function(){i[0].obj=n,a(),e()};r()},s=function(t){var n=this,i=t,s=$(window),o=i.find(".plans__list_caption"),a=i.find(".plans__list-row:not(.plans__list_caption)"),e=[],r=[],h=function(){s.on({load:function(){s.width()>=1024&&f()},resize:function(){s.width()<1024?(o.css({height:""}),a.css({height:""})):f()}})},f=function(){e=[],r=[],o.each(function(){var t=$(this).innerHeight();e.push(t)});var t=Math.max.apply(Math,e);a.each(function(){var t=$(this).innerHeight();r.push(t)});var n=Math.max.apply(Math,r);o.innerHeight(t),a.innerHeight(n)},c=function(){i[0].obj=n,h()};c()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new e($(this))}),$.each($(".plans"),function(){new a($(this))})});var t=function(t){var e=this,a=t,n=a.find(".choose-data__items"),i=n.find("input"),o=a.find(".btn_next"),r={},s={},c={},l={},f=function(){i.on({click:function(){u($(this)),v(),localStorage.setItem("idItems",JSON.stringify(l))},keyup:function(){"text"===$(this).attr("type")}}),o.on({click:function(){var t=$(this),e=t.data("src");return h(),window.location.href=e,!1}})},u=function(t){var e=t;"radio"===e.attr("type")?(e.parents(".plans").length?r.ratePlan={sessionType:e.data("rate"),value:e.attr("value")}:r[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):"checkbox"===e.attr("type")&&(e.is(":checked")?(s[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):(delete s[e.attr("name")],delete l[e.attr("name")]))},d=function(){if(void 0!=localStorage.idItems){i.each(function(){var t=$(this);"checkbox"===t.attr("type")?t.prop("checked",!1):"text"===t.attr("type")&&t.val("")});var t=JSON.parse(localStorage.idItems);for(var e in t){var a=t[e];i.filter("#"+a).prop("checked",!0)}}},h=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?l[t.attr("name")]=t.attr("id"):"checkbox"===t.attr("type")&&(t.is(":checked")?l[t.attr("name")]=t.attr("id"):delete l[t.attr("name")]))}),localStorage.setItem("idItems",JSON.stringify(l))},p=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?r.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:r[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")]))}),v()},v=function(){localStorage.setItem("radioChoose",JSON.stringify(r)),localStorage.setItem("checkboxChoose",JSON.stringify(s)),localStorage.setItem("inputValue",JSON.stringify(c)),console.log(r),console.log(s),console.log(c)},g=function(){a[0].obj=e,f(),d(),p()};g()},e=function(t){var e,a,n,i=this,o=t,r=o.find(".order__chosen-data span"),s=o.find("input#input_1_5"),c="",l=function(){},f=function(){var t="",n="",i=[];for(var o in e)var s=e[o]+", ";void 0!=e.ratePlan&&$.each(e.ratePlan,function(){var a=e.ratePlan.value.split(" ");if("session pricing"===e.ratePlan.sessionType)t="<span>"+e.ratePlan.sessionType+" ("+a[0]+" sessions)</span>, ";else if("minute pricing"===e.ratePlan.sessionType){var n=a[0].replace(/[^0-9]+/g,"");n>1e5&&(n=n/1e6+"M"),t="<span>"+e.ratePlan.sessionType+" ("+n+" minutes ("+a[2]+"/minute)</span>, "}}),""==t&&(t="");for(var c in a)i.push(c);i.length>0&&(n=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service");var l="";""==t?r.html("You chose "+s+l+n+"."):r.html("You chose "+t+s+n+").")},u=function(){c="";for(var t in e){var n=e[t];if("string"==typeof n)c+=""+n+"; ";else if("object"==typeof n)for(var i in n){var o=n[i];c+=""+o+"; "}}for(var r in a){var l=a[r];c+=""+l+"; "}s.val(c)},d=function(){void 0!=localStorage.radioChoose?(e=JSON.parse(localStorage.radioChoose),a=JSON.parse(localStorage.checkboxChoose),n=JSON.parse(localStorage.inputValue),u(),f()):window.location.href=$("body").data("src")},h=function(){o[0].obj=i,l(),d()};h()},a=function(t){var e=this,a=t,n=a.find(".plans__item"),i=a.find('input[type="radio"]'),o=$(window),r=function(){o.on({load:function(){s()}}),i.on({change:function(){var t=$(this),e=t.parents(".plans__item");e.hasClass("active")||(n.removeClass("active"),e.addClass("active"))}}),n.on({click:function(){var t=$(this),e=t.find('input[type="radio"]:first');t.hasClass("active")||(n.removeClass("active"),t.addClass("active"),e.trigger("click"))}})},s=function(){var t=i.filter(":checked"),e=t.parents(".plans__item");e.addClass("active")},c=function(){a[0].obj=e,r()};c()}}();
//# sourceMappingURL=data:application/json;base64,
