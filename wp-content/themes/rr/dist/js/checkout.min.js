"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new o($(this))}),$.each($(".plans"),function(){new i($(this))}),$.each($(".site__header"),function(){new e($(this))}),$(".popup").each(function(){new s($(this))}),$(document).bind("gform_confirmation_loaded",function(){$(".popup__request").addClass("popup__request_no-bg")})});var t=function(t){var n=this,o=t,i=o,e=$(window),s=(e.width(),function(){e.on({resize:function(){r(),a()},load:function(){a()},scroll:function(){a()}})}),a=function(){var t,n=o.offset().top,i=n-e.height(),s=n+o.height(),a=(s-e.scrollTop())/(s-i);a>1?t=0:a<0&&(t=1),a<1&&a>0&&(t=1-a),o.hasClass("putted-all")&&(t=.5),c(i,s,t)},c=function(t,n,o){i.each(function(){var t=$(this),n=100,i=1;t.hasClass("clouds_1")&&(i=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*i+"%)",transform:"translateX("+200*o*i+"%)"}))})},r=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},h=function(){o[0].obj=n,s(),r()};h()},n=function(t){var n=this,o=t,i=o.find(".guy__hand"),e=$(window),s=e.width(),a=function(){e.on({resize:function(){s!=e.width()&&(s=e.width()+1,e.width()<768&&i.css({"-webkit-transform":"none",transform:"none"})),h(),r(),c()},load:function(){e.width()>=768&&c()},scroll:function(){e.width()>=768&&c()}})},c=function(){var t,n=e.height(),s=o.offset().top,a=i.offset().top-n,c=s-n+o.height();o.hasClass("putted")&&(a=i.offset().top-n/2,c=n/2.5);var r=(c-e.scrollTop())/(c-a);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),o.hasClass("putted-all")&&(t=1),u(a,c,t)},r=function(){var t=e.height(),n=e.scrollTop(),s=i.height(),a=i.offset().top;s+a<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},h=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},u=function(t,n,o){var s=n-t;i.each(function(){var n=$(this),i=n.data("rotate-start"),a=n.data("rotate-finish"),c=i+(a-i)/s*(e.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-a+"deg )",transform:"rotate( "+-a+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):n.css({"-webkit-transform":"rotate( "+-c+"deg )",transform:"rotate( "+-c+"deg )"})})},f=function(){o[0].obj=n,a(),r(),h()};f()},o=function(t){var n=this,o=t,i=$(window),e=$(".site__header"),s=function(){i.on({resize:function(){a()}})},a=function(){var t=e.height();o.height(i.height()-t),o.css({"min-height":o.find(">div:first").height()})},c=function(){o[0].obj=n,s(),a()};c()},i=function(t){var n=this,o=t,i=$(window),e=o.find(".plans__list_caption"),s=o.find(".plans__list-row:not(.plans__list_caption)"),a=[],c=[],r=function(){i.on({load:function(){i.width()>=1024&&h()},resize:function(){i.width()<1024?(e.css({height:""}),s.css({height:""})):h()}})},h=function(){a=[],c=[],e.each(function(){var t=$(this).innerHeight();a.push(t)});var t=Math.max.apply(Math,a);s.each(function(){var t=$(this).innerHeight();c.push(t)});var n=Math.max.apply(Math,c);e.innerHeight(t),s.innerHeight(n)},u=function(){o[0].obj=n,r()};u()},e=function(t){var n=this,o=t,i=($(window),o.find(".site__header__btn")),e=o.find(".site__header-menu"),s=($(".site__content"),$("html")),a=function(){o.removeClass("opened"),s.css({"overflow-y":"auto"}),e.attr("style","")},c=function(){i.on({click:function(){return o.hasClass("opened")?a():r(),!1}})},r=function(){o.addClass("opened"),s.css({"overflow-y":"hidden"})},h=function(){c(),o[0].obj=n};h()},s=function(t){var n=this,o=40,i=$(".popup__open"),e=t,s=e.find(".popup__close, .popup__cancel"),a=e.find(".popup__wrap"),c=e.find(".popup__content"),r=$("html"),h=$(window),u=setTimeout(function(){},1),f=function(){h.height()-2*o-a.height()>0?a.css({top:(h.height()-2*o-a.height())/2}):a.css({top:0})},d=function(){var t,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),t=n.offsetWidth-n.clientWidth,document.body.removeChild(n),t},l=function(){e.css({overflowY:"hidden"}),r.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),u=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},p=function(){e[0].obj=n,_()},_=function(){h.on({resize:function(){f()}}),i.on({click:function(){return w($(this).attr("data-popup")),!1}}),a.on({click:function(t){t.stopPropagation()}}),e.on({click:function(){return l(),!1}}),s.on({click:function(){return l(),!1}})},w=function(t){g(t),r.css({overflowY:"hidden",paddingRight:d()}),e.addClass("popup_opened"),f()},g=function(t){var n=c.filter(".popup__"+t);c.css({display:"none"}),n.css({display:"block"})};p()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new a($(this))}),$.each($(".plans"),function(){new e($(this))})});var t=function(t){var a=this,e=t,n=e.find(".choose-data__items"),i=n.find("input"),r=e.find(".btn_next"),o={},s={},c={},l=function(){i.on({click:function(){f($(this)),v(),localStorage.setItem("idItems",JSON.stringify(c))}}),r.on({click:function(){var t=$(this),a=t.data("src");return h(),window.location.href=a,!1}})},f=function(t){var a=t;"radio"===a.attr("type")?(a.parents(".plans").length?o.ratePlan={sessionType:a.data("rate"),value:a.attr("value")}:o[a.attr("name")]=a.attr("value"),c[a.attr("name")]=a.attr("id")):"checkbox"===a.attr("type")&&(a.is(":checked")?(s[a.attr("name")]=a.attr("value"),c[a.attr("name")]=a.attr("id")):(delete s[a.attr("name")],delete c[a.attr("name")]))},d=function(){if(void 0!=localStorage.idItems){i.each(function(){var t=$(this);"checkbox"===t.attr("type")&&t.prop("checked",!1)});var t=JSON.parse(localStorage.idItems);for(var a in t){var e=t[a];i.filter("#"+e).prop("checked",!0)}}},h=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?c[t.attr("name")]=t.attr("id"):"checkbox"===t.attr("type")&&(t.is(":checked")?c[t.attr("name")]=t.attr("id"):delete c[t.attr("name")]))}),localStorage.setItem("idItems",JSON.stringify(c))},u=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?o.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:o[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")]))}),v()},v=function(){localStorage.setItem("radioChoose",JSON.stringify(o)),localStorage.setItem("checkboxChoose",JSON.stringify(s))},p=function(){e[0].obj=a,l(),d(),u()};p()},a=function(t){var a,e,n=this,i=t,r=i.find(".order__chosen-data span"),o=i.find("input#input_1_5"),s="",c=function(){},l=function(){var t="",n="",i=[];for(var o in a)var s=a[o];void 0!=a.ratePlan&&$.each(a.ratePlan,function(){var e=a.ratePlan.value.split(" ");if("session pricing"===a.ratePlan.sessionType)t="<span>"+a.ratePlan.sessionType+" ("+e[0]+" sessions)</span>";else if("minute pricing"===a.ratePlan.sessionType){var n=e[0].replace(/[^0-9]+/g,"");n>1e5&&(n=n/1e6+"M"),t="<span>"+a.ratePlan.sessionType+" ("+n+" minutes ("+e[2]+"/minute)</span>"}});for(var c in e)i.push(c);i.length>0&&(n=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service"),r.html("You chose "+t+", "+s+" "+n+").")},f=function(){s="";for(var t in a){var n=a[t];if("string"==typeof n)s+=""+n+"; ";else if("object"==typeof n)for(var i in n){var r=n[i];s+=""+r+"; "}}for(var c in e){var l=e[c];s+=""+l+"; "}o.val(s)},d=function(){void 0!=localStorage.radioChoose?(a=JSON.parse(localStorage.radioChoose),e=JSON.parse(localStorage.checkboxChoose),f(),l()):window.location.href=$("body").data("src")},h=function(){i[0].obj=n,c(),d()};h()},e=function(t){var a=this,e=t,n=e.find(".plans__item"),i=e.find('input[type="radio"]'),r=$(window),o=function(){r.on({load:function(){s()}}),i.on({change:function(){var t=$(this),a=t.parents(".plans__item");a.hasClass("active")||(n.removeClass("active"),a.addClass("active"))}}),n.on({click:function(){var t=$(this),a=t.find('input[type="radio"]:first');t.hasClass("active")||(n.removeClass("active"),t.addClass("active"),a.trigger("click"))}})},s=function(){var t=i.filter(":checked"),a=t.parents(".plans__item");a.addClass("active")},c=function(){e[0].obj=a,o()};c()}}();
//# sourceMappingURL=data:application/json;base64,
