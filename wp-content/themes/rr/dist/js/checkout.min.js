"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new i($(this))}),$.each($(".plans"),function(){new s($(this))})});var t=function(t){var n=this,i=t,s=i,o=$(window),a=(o.width(),function(){o.on({resize:function(){h(),e()},load:function(){e()},scroll:function(){e()}})}),e=function(){var t,n=i.offset().top,s=n-o.height(),a=n+i.height(),e=(a-o.scrollTop())/(a-s);e>1?t=0:e<0&&(t=1),e<1&&e>0&&(t=1-e),i.hasClass("putted-all")&&(t=.5),r(s,a,t)},r=function(t,n,i){s.each(function(){var t=$(this),n=100,s=1;t.hasClass("clouds_1")&&(s=-1),0==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):1==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):(i>=.5&&(i=1-i),t.css({"-webkit-transform":"translateX("+200*i*s+"%)",transform:"translateX("+200*i*s+"%)"}))})},h=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},f=function(){i[0].obj=n,a(),h()};f()},n=function(t){var n=this,i=t,s=i.find(".guy__hand"),o=$(window),a=o.width(),e=function(){o.on({resize:function(){a!=o.width()&&(a=o.width()+1,o.width()<768&&s.css({"-webkit-transform":"none",transform:"none"})),f(),h(),r()},load:function(){o.width()>=768&&r()},scroll:function(){o.width()>=768&&r()}})},r=function(){var t,n=o.height(),a=i.offset().top,e=s.offset().top-n,r=a-n+i.height();i.hasClass("putted")&&(e=s.offset().top-n/2,r=n/2.5);var h=(r-o.scrollTop())/(r-e);h>1?t=0:h<0&&(t=1),h<1&&h>0&&(t=1-h),i.hasClass("putted-all")&&(t=1),c(e,r,t)},h=function(){var t=o.height(),n=o.scrollTop(),a=s.height(),e=s.offset().top;a+e<t+n&&$(".site").height()>2*t?i.addClass("putted"):i.removeClass("putted")},f=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},c=function(t,n,i){var a=n-t;s.each(function(){var n=$(this),s=n.data("rotate-start"),e=n.data("rotate-finish"),r=s+(e-s)/a*(o.scrollTop()-t);1==i?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):0==i?n.css({"-webkit-transform":"rotate( "+-s+"deg )",transform:"rotate( "+-s+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},u=function(){i[0].obj=n,e(),h(),f()};u()},i=function(t){var n=this,i=t,s=$(window),o=$(".site__header"),a=function(){s.on({resize:function(){e()}})},e=function(){var t=o.height();i.height(s.height()-t),i.css({"min-height":i.find(">div:first").height()})},r=function(){i[0].obj=n,a(),e()};r()},s=function(t){var n=this,i=t,s=$(window),o=i.find(".plans__list_caption"),a=i.find(".plans__list-row:not(.plans__list_caption)"),e=[],r=[],h=function(){s.on({load:function(){s.width()>=1024&&f()},resize:function(){s.width()<1024?(o.css({height:""}),a.css({height:""})):f()}})},f=function(){e=[],r=[],o.each(function(){var t=$(this).innerHeight();e.push(t)});var t=Math.max.apply(Math,e);a.each(function(){var t=$(this).innerHeight();r.push(t)});var n=Math.max.apply(Math,r);o.innerHeight(t),a.innerHeight(n)},c=function(){i[0].obj=n,h()};c()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new a($(this))}),$.each($(".plans"),function(){new e($(this))})});var t=function(t){var a=this,e=t,n=e.find(".choose-data__items"),i=n.find("input"),r=e.find(".btn_next"),o={},s={},c={},l=function(){i.on({click:function(){f($(this)),v(),localStorage.setItem("idItems",JSON.stringify(c))}}),r.on({click:function(){var t=$(this),a=t.data("src");return h(),window.location.href=a,!1}})},f=function(t){var a=t;"radio"===a.attr("type")?(a.parents(".plans").length?o.ratePlan={sessionType:a.data("rate"),value:a.attr("value")}:o[a.attr("name")]=a.attr("value"),c[a.attr("name")]=a.attr("id")):"checkbox"===a.attr("type")&&(a.is(":checked")?(s[a.attr("name")]=a.attr("value"),c[a.attr("name")]=a.attr("id")):(delete s[a.attr("name")],delete c[a.attr("name")]))},d=function(){if(void 0!=localStorage.idItems){i.each(function(){var t=$(this);"checkbox"===t.attr("type")&&t.prop("checked",!1)});var t=JSON.parse(localStorage.idItems);for(var a in t){var e=t[a];i.filter("#"+e).prop("checked",!0)}}},h=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?c[t.attr("name")]=t.attr("id"):"checkbox"===t.attr("type")&&(t.is(":checked")?c[t.attr("name")]=t.attr("id"):delete c[t.attr("name")]))}),localStorage.setItem("idItems",JSON.stringify(c))},u=function(){i.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?o.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:o[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")]))}),v()},v=function(){localStorage.setItem("radioChoose",JSON.stringify(o)),localStorage.setItem("checkboxChoose",JSON.stringify(s))},p=function(){e[0].obj=a,l(),d(),u()};p()},a=function(t){var a,e,n=this,i=t,r=i.find(".order__chosen-data span"),o=i.find("input#input_1_5"),s="",c=function(){},l=function(){var t="",n="",i=[];for(var o in a)var s=a[o];void 0!=a.ratePlan&&$.each(a.ratePlan,function(){var e=a.ratePlan.value.split(" ");if("session pricing"===a.ratePlan.sessionType)t="<span>"+a.ratePlan.sessionType+" ("+e[0]+" sessions)</span>";else if("minute pricing"===a.ratePlan.sessionType){var n=e[0].replace(/[^0-9]+/g,"");n>1e5&&(n=n/1e6+"M"),t="<span>"+a.ratePlan.sessionType+" ("+n+" minutes ("+e[2]+"/minute)</span>"}});for(var c in e)i.push(c);i.length>0&&(n=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service"),r.html("You chose "+t+", "+s+" "+n+").")},f=function(){s="";for(var t in a){var n=a[t];if("string"==typeof n)s+=""+n+"; ";else if("object"==typeof n)for(var i in n){var r=n[i];s+=""+r+"; "}}for(var c in e){var l=e[c];s+=""+l+"; "}o.val(s)},d=function(){void 0!=localStorage.radioChoose?(a=JSON.parse(localStorage.radioChoose),e=JSON.parse(localStorage.checkboxChoose),f(),l()):window.location.href=$("body").data("src")},h=function(){i[0].obj=n,c(),d()};h()},e=function(t){var a=this,e=t,n=e.find(".plans__item"),i=e.find('input[type="radio"]'),r=$(window),o=function(){r.on({load:function(){s()}}),i.on({change:function(){var t=$(this),a=t.parents(".plans__item");a.hasClass("active")||(n.removeClass("active"),a.addClass("active"))}}),n.on({click:function(){var t=$(this),a=t.find('input[type="radio"]:first');t.hasClass("active")||(n.removeClass("active"),t.addClass("active"),a.trigger("click"))}})},s=function(){var t=i.filter(":checked"),a=t.parents(".plans__item");a.addClass("active")},c=function(){e[0].obj=a,o()};c()}}();
//# sourceMappingURL=data:application/json;base64,
