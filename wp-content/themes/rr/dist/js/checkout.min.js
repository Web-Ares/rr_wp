"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new o($(this))}),$.each($(".plans"),function(){new i($(this))}),$.each($(".site__header"),function(){new e($(this))}),$(".popup").each(function(){new s($(this))})});var t=function(t){var n=this,o=t,i=o,e=$(window),s=(e.width(),function(){e.on({resize:function(){r(),a()},load:function(){a()},scroll:function(){a()}})}),a=function(){var t,n=o.offset().top,i=n-e.height(),s=n+o.height(),a=(s-e.scrollTop())/(s-i);a>1?t=0:a<0&&(t=1),a<1&&a>0&&(t=1-a),o.hasClass("putted-all")&&(t=.5),c(i,s,t)},c=function(t,n,o){i.each(function(){var t=$(this),n=100,i=1;t.hasClass("clouds_1")&&(i=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*i+"%)",transform:"translateX("+200*o*i+"%)"}))})},r=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},h=function(){o[0].obj=n,s(),r()};h()},n=function(t){var n=this,o=t,i=o.find(".guy__hand"),e=$(window),s=e.width(),a=function(){e.on({resize:function(){s!=e.width()&&(s=e.width()+1,e.width()<768&&i.css({"-webkit-transform":"none",transform:"none"})),h(),r(),c()},load:function(){e.width()>=768&&c()},scroll:function(){e.width()>=768&&c()}})},c=function(){var t,n=e.height(),s=o.offset().top,a=i.offset().top-n,c=s-n+o.height();o.hasClass("putted")&&(a=i.offset().top-n/2,c=n/2.5);var r=(c-e.scrollTop())/(c-a);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),o.hasClass("putted-all")&&(t=1),f(a,c,t)},r=function(){var t=e.height(),n=e.scrollTop(),s=i.height(),a=i.offset().top;s+a<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},h=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},f=function(t,n,o){var s=n-t;i.each(function(){var n=$(this),i=n.data("rotate-start"),a=n.data("rotate-finish"),c=i+(a-i)/s*(e.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-a+"deg )",transform:"rotate( "+-a+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):n.css({"-webkit-transform":"rotate( "+-c+"deg )",transform:"rotate( "+-c+"deg )"})})},u=function(){o[0].obj=n,a(),r(),h()};u()},o=function(t){var n=this,o=t,i=$(window),e=$(".site__header"),s=function(){i.on({resize:function(){a()}})},a=function(){var t=e.height();o.height(i.height()-t),o.css({"min-height":o.find(">div:first").height()})},c=function(){o[0].obj=n,s(),a()};c()},i=function(t){var n=this,o=t,i=$(window),e=o.find(".plans__list_caption"),s=o.find(".plans__list-row:not(.plans__list_caption)"),a=[],c=[],r=function(){i.on({load:function(){i.width()>=1024&&h()},resize:function(){i.width()<1024?(e.css({height:""}),s.css({height:""})):h()}})},h=function(){a=[],c=[],e.each(function(){var t=$(this).innerHeight();a.push(t)});var t=Math.max.apply(Math,a);s.each(function(){var t=$(this).innerHeight();c.push(t)});var n=Math.max.apply(Math,c);e.innerHeight(t),s.innerHeight(n)},f=function(){o[0].obj=n,r()};f()},e=function(t){var n=this,o=t,i=$(window),e=o.find(".site__header__btn"),s=o.find(".site__header-menu"),a=$("html"),c=function(){o.removeClass("opened"),a.css({"overflow-y":"auto"}),s.attr("style","")},r=function(){i.on({scroll:function(){i.scrollTop()>0?o.addClass("fixed"):o.removeClass("fixed")},resize:function(){}}),e.on({click:function(){return o.hasClass("opened")?c():h(),!1}})},h=function(){o.addClass("opened"),a.css({"overflow-y":"hidden"})},f=function(){r(),o[0].obj=n,i.scrollTop()>o.innerHeight()/2?o.addClass("fixed"):o.removeClass("fixed")};f()},s=function(t){var n=this,o=40,i=$(".popup__open"),e=t,s=e.find(".popup__close, .popup__cancel"),a=e.find(".popup__wrap"),c=e.find(".popup__content"),r=$("html"),h=$(window),f=setTimeout(function(){},1),u=function(){h.height()-2*o-a.height()>0?a.css({top:(h.height()-2*o-a.height())/2}):a.css({top:0})},d=function(){var t,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),t=n.offsetWidth-n.clientWidth,document.body.removeChild(n),t},l=function(){e.css({overflowY:"hidden"}),r.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),f=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},p=function(){e[0].obj=n,w()},w=function(){h.on({resize:function(){u()}}),i.on({click:function(){return _($(this).attr("data-popup")),!1}}),a.on({click:function(t){t.stopPropagation()}}),e.on({click:function(){return l(),!1}}),s.on({click:function(){return l(),!1}})},_=function(t){g(t),r.css({overflowY:"hidden",paddingRight:d()}),e.addClass("popup_opened"),u()},g=function(t){var n=c.filter(".popup__"+t);c.css({display:"none"}),n.css({display:"block"})};p()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new e($(this))}),$.each($(".plans"),function(){new a($(this))})});var t=function(t){var e=this,a=t,n=a.find(".choose-data__items"),r=n.find("input"),i=a.find(".btn_next"),o={},s={},c={},l={},d={},f=function(){r.on({click:function(){"text"!==$(this).attr("type")&&(u($(this)),y(),localStorage.setItem("idItems",JSON.stringify(l)))},keyup:function(){"text"===$(this).attr("type")&&(u($(this)),y(),localStorage.setItem("idItems",JSON.stringify(l)),localStorage.setItem("valueInput",JSON.stringify(d)))},keydown:function(t){if($(this).hasClass("site__input_num")){if($.inArray(t.keyCode,[46,8,9,27,13,110,190])!==-1||65==t.keyCode&&t.ctrlKey===!0||67==t.keyCode&&t.ctrlKey===!0||88==t.keyCode&&t.ctrlKey===!0||t.keyCode>=35&&t.keyCode<=39)return;(t.shiftKey||t.keyCode<48||t.keyCode>57)&&(t.keyCode<96||t.keyCode>105)&&t.preventDefault()}}}),i.on({click:function(){var t=$(this),e=t.data("src");return p(),window.location.href=e,!1}})},u=function(t){var e=t;"radio"===e.attr("type")?(e.parents(".plans").length?o.ratePlan={sessionType:e.data("rate"),value:e.attr("value")}:o[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):"checkbox"===e.attr("type")?e.is(":checked")?(s[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):(delete s[e.attr("name")],delete l[e.attr("name")]):"text"===e.attr("type")&&(""!=e.val()?(c[e.attr("name")]=e.val(),l[e.attr("name")]=e.attr("id"),d[e.attr("id")]=e.val()):(delete c[e.attr("name")],delete l[e.attr("name")],delete d[e.attr("id")]))},v=function(){if(void 0!=localStorage.idItems){r.each(function(){var t=$(this);"checkbox"===t.attr("type")?t.prop("checked",!1):"text"===t.attr("type")&&t.val("")});var t=JSON.parse(localStorage.idItems),e=JSON.parse(localStorage.valueInput);for(var a in t){var n=t[a];r.each(function(){var t=$(this);if(t.filter("#"+n).prop("checked",!0),console.log(n),"text"===t.attr("type"))for(var a in e){var r=e[a];t.filter("#"+n).val(r)}})}}},p=function(){r.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?l[t.attr("name")]=t.attr("id"):"checkbox"===t.attr("type")&&(t.is(":checked")?l[t.attr("name")]=t.attr("id"):delete l[t.attr("name")])),"text"===t.attr("type")&&(""!=t.val()?(l[t.attr("name")]=t.attr("id"),d[t.attr("id")]=t.val()):(delete l[t.attr("name")],delete d[t.attr("id")]),localStorage.setItem("valueInput",JSON.stringify(d)))}),localStorage.setItem("idItems",JSON.stringify(l))},h=function(){r.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?o.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:o[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")])),"text"===t.attr("type")&&(""!=t.val()?c[t.attr("name")]=t.val():delete c[t.attr("name")])}),y(),p()},y=function(){localStorage.setItem("radioChoose",JSON.stringify(o)),localStorage.setItem("checkboxChoose",JSON.stringify(s)),localStorage.setItem("inputValue",JSON.stringify(c))},m=function(){a[0].obj=e,f(),v(),h()};m()},e=function(t){var e,a,n,r=this,i=t,o=i.find(".order__chosen-data span"),s=i.find("input#input_1_5"),c="",l=function(){},d=function(){var t="",r="",i=[];for(var s in e)var c=e[s]+", ";void 0!=e.ratePlan&&$.each(e.ratePlan,function(){var a=e.ratePlan.value.split(" ");if("session pricing"===e.ratePlan.sessionType)t="<span>"+e.ratePlan.sessionType+" ("+a[0]+" sessions)</span>, ";else if("minute pricing"===e.ratePlan.sessionType){var n=a[0].replace(/[^0-9]+/g,"");n>1e5&&(n=n/1e6+"M"),t="<span>"+e.ratePlan.sessionType+" ("+n+" minutes ("+a[2]+"/minute)</span>, "}}),""==t&&(t="");for(var l in a)i.push(l);i.length>0&&(r=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service");var d="";for(var f in n)d=n.hasOwnProperty(f)?n[f]+" ":"";""==t?o.html("You chose "+c+"ports: "+d+r+"."):o.html("You chose "+t+c+r+").")},f=function(){c="";for(var t in e){var r=e[t];if("string"==typeof r)c+=""+r+"; ";else if("object"==typeof r)for(var i in r){var o=r[i];c+=""+o+"; "}}for(var l in a){var d=a[l];c+=""+d+"; "}var f="";for(var u in n)f=n.hasOwnProperty(u)?n[u]:"",c+=""+f+"; ";s.val(c)},u=function(){void 0!=localStorage.radioChoose?(e=JSON.parse(localStorage.radioChoose),a=JSON.parse(localStorage.checkboxChoose),n=JSON.parse(localStorage.inputValue),f(),d()):window.location.href=$("body").data("src")},v=function(){i[0].obj=r,l(),u()};v()},a=function(t){var e=this,a=t,n=a.find(".plans__item"),r=a.find('input[type="radio"]'),i=$(window),o=function(){i.on({load:function(){s()}}),r.on({change:function(){var t=$(this),e=t.parents(".plans__item");e.hasClass("active")||(n.removeClass("active"),e.addClass("active"))}}),n.on({click:function(){var t=$(this),e=t.find('input[type="radio"]:first');t.hasClass("active")||(n.removeClass("active"),t.addClass("active"),e.trigger("click"))}})},s=function(){var t=r.filter(":checked"),e=t.parents(".plans__item");e.addClass("active")},c=function(){a[0].obj=e,o()};c()}}();
//# sourceMappingURL=data:application/json;base64,
