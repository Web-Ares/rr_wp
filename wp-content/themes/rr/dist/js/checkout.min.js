"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new i($(this))}),$.each($(".plans"),function(){new s($(this))})});var t=function(t){var n=this,i=t,s=i,o=$(window),a=(o.width(),function(){o.on({resize:function(){h(),e()},load:function(){e()},scroll:function(){e()}})}),e=function(){var t,n=i.offset().top,s=n-o.height(),a=n+i.height(),e=(a-o.scrollTop())/(a-s);e>1?t=0:e<0&&(t=1),e<1&&e>0&&(t=1-e),i.hasClass("putted-all")&&(t=.5),r(s,a,t)},r=function(t,n,i){s.each(function(){var t=$(this),n=100,s=1;t.hasClass("clouds_1")&&(s=-1),0==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):1==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):(i>=.5&&(i=1-i),t.css({"-webkit-transform":"translateX("+200*i*s+"%)",transform:"translateX("+200*i*s+"%)"}))})},h=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},f=function(){i[0].obj=n,a(),h()};f()},n=function(t){var n=this,i=t,s=i.find(".guy__hand"),o=$(window),a=o.width(),e=function(){o.on({resize:function(){a!=o.width()&&(a=o.width()+1,o.width()<768&&s.css({"-webkit-transform":"none",transform:"none"})),f(),h(),r()},load:function(){o.width()>=768&&r()},scroll:function(){o.width()>=768&&r()}})},r=function(){var t,n=o.height(),a=i.offset().top,e=s.offset().top-n,r=a-n+i.height();i.hasClass("putted")&&(e=s.offset().top-n/2,r=n/2.5);var h=(r-o.scrollTop())/(r-e);h>1?t=0:h<0&&(t=1),h<1&&h>0&&(t=1-h),i.hasClass("putted-all")&&(t=1),c(e,r,t)},h=function(){var t=o.height(),n=o.scrollTop(),a=s.height(),e=s.offset().top;a+e<t+n&&$(".site").height()>2*t?i.addClass("putted"):i.removeClass("putted")},f=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},c=function(t,n,i){var a=n-t;s.each(function(){var n=$(this),s=n.data("rotate-start"),e=n.data("rotate-finish"),r=s+(e-s)/a*(o.scrollTop()-t);1==i?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):0==i?n.css({"-webkit-transform":"rotate( "+-s+"deg )",transform:"rotate( "+-s+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},u=function(){i[0].obj=n,e(),h(),f()};u()},i=function(t){var n=this,i=t,s=$(window),o=$(".site__header"),a=function(){s.on({resize:function(){e()}})},e=function(){var t=o.height();i.height(s.height()-t),i.css({"min-height":i.find(">div:first").height()})},r=function(){i[0].obj=n,a(),e()};r()},s=function(t){var n=this,i=t,s=$(window),o=i.find(".plans__list_caption"),a=i.find(".plans__list-row:not(.plans__list_caption)"),e=[],r=[],h=function(){s.on({load:function(){s.width()>=1024&&f()},resize:function(){s.width()<1024?(o.css({height:""}),a.css({height:""})):f()}})},f=function(){e=[],r=[],o.each(function(){var t=$(this).innerHeight();e.push(t)});var t=Math.max.apply(Math,e);a.each(function(){var t=$(this).innerHeight();r.push(t)});var n=Math.max.apply(Math,r);o.innerHeight(t),a.innerHeight(n)},c=function(){i[0].obj=n,h()};c()}}();
"use strict";!function(){$(function(){$.each($(".choose-data"),function(){new t($(this))}),$.each($(".order"),function(){new e($(this))}),$.each($(".plans"),function(){new a($(this))})});var t=function(t){var e=this,a=t,n=a.find(".choose-data__items"),r=n.find("input"),i=a.find(".btn_next"),o={},s={},c={},l={},d={},f=function(){r.on({click:function(){"text"!==$(this).attr("type")&&(u($(this)),y(),localStorage.setItem("idItems",JSON.stringify(l)))},keyup:function(){"text"===$(this).attr("type")&&(u($(this)),y(),localStorage.setItem("idItems",JSON.stringify(l)),localStorage.setItem("valueInput",JSON.stringify(d)))},keydown:function(t){if($(this).hasClass("site__input_num")){if($.inArray(t.keyCode,[46,8,9,27,13,110,190])!==-1||65==t.keyCode&&t.ctrlKey===!0||67==t.keyCode&&t.ctrlKey===!0||88==t.keyCode&&t.ctrlKey===!0||t.keyCode>=35&&t.keyCode<=39)return;(t.shiftKey||t.keyCode<48||t.keyCode>57)&&(t.keyCode<96||t.keyCode>105)&&t.preventDefault()}}}),i.on({click:function(){var t=$(this),e=t.data("src");return p(),window.location.href=e,!1}})},u=function(t){var e=t;"radio"===e.attr("type")?(e.parents(".plans").length?o.ratePlan={sessionType:e.data("rate"),value:e.attr("value")}:o[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):"checkbox"===e.attr("type")?e.is(":checked")?(s[e.attr("name")]=e.attr("value"),l[e.attr("name")]=e.attr("id")):(delete s[e.attr("name")],delete l[e.attr("name")]):"text"===e.attr("type")&&(""!=e.val()?(c[e.attr("name")]=e.val(),l[e.attr("name")]=e.attr("id"),d[e.attr("id")]=e.val()):(delete c[e.attr("name")],delete l[e.attr("name")],delete d[e.attr("id")]))},v=function(){if(void 0!=localStorage.idItems){r.each(function(){var t=$(this);"checkbox"===t.attr("type")?t.prop("checked",!1):"text"===t.attr("type")&&t.val("")});var t=JSON.parse(localStorage.idItems),e=JSON.parse(localStorage.valueInput);for(var a in t){var n=t[a];r.each(function(){var t=$(this);if(t.filter("#"+n).prop("checked",!0),console.log(n),"text"===t.attr("type"))for(var a in e){var r=e[a];t.filter("#"+n).val(r)}})}}},p=function(){r.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?l[t.attr("name")]=t.attr("id"):"checkbox"===t.attr("type")&&(t.is(":checked")?l[t.attr("name")]=t.attr("id"):delete l[t.attr("name")])),"text"===t.attr("type")&&(""!=t.val()?(l[t.attr("name")]=t.attr("id"),d[t.attr("id")]=t.val()):(delete l[t.attr("name")],delete d[t.attr("id")]),localStorage.setItem("valueInput",JSON.stringify(d)))}),localStorage.setItem("idItems",JSON.stringify(l))},h=function(){r.each(function(){var t=$(this);t.is(":checked")&&("radio"===t.attr("type")?t.parents(".plans").length?o.ratePlan={sessionType:t.data("rate"),value:t.attr("value")}:o[t.attr("name")]=t.attr("value"):"checkbox"===t.attr("type")&&(t.is(":checked")?s[t.attr("name")]=t.attr("value"):delete s[t.attr("name")])),"text"===t.attr("type")&&(""!=t.val()?c[t.attr("name")]=t.val():delete c[t.attr("name")])}),y(),p()},y=function(){localStorage.setItem("radioChoose",JSON.stringify(o)),localStorage.setItem("checkboxChoose",JSON.stringify(s)),localStorage.setItem("inputValue",JSON.stringify(c))},m=function(){a[0].obj=e,f(),v(),h()};m()},e=function(t){var e,a,n,r=this,i=t,o=i.find(".order__chosen-data span"),s=i.find("input#input_1_5"),c="",l=function(){},d=function(){var t="",r="",i=[];for(var s in e)var c=e[s]+", ";void 0!=e.ratePlan&&$.each(e.ratePlan,function(){var a=e.ratePlan.value.split(" ");if("session pricing"===e.ratePlan.sessionType)t="<span>"+e.ratePlan.sessionType+" ("+a[0]+" sessions)</span>, ";else if("minute pricing"===e.ratePlan.sessionType){var n=a[0].replace(/[^0-9]+/g,"");n>1e5&&(n=n/1e6+"M"),t="<span>"+e.ratePlan.sessionType+" ("+n+" minutes ("+a[2]+"/minute)</span>, "}}),""==t&&(t="");for(var l in a)i.push(l);i.length>0&&(r=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service");var d="";for(var f in n)d=n.hasOwnProperty(f)?n[f]+" ":"";""==t?o.html("You chose "+c+"ports: "+d+r+"."):o.html("You chose "+t+c+r+").")},f=function(){c="";for(var t in e){var r=e[t];if("string"==typeof r)c+=""+r+"; ";else if("object"==typeof r)for(var i in r){var o=r[i];c+=""+o+"; "}}for(var l in a){var d=a[l];c+=""+d+"; "}var f="";for(var u in n)f=n.hasOwnProperty(u)?n[u]:"",c+=""+f+"; ";s.val(c)},u=function(){void 0!=localStorage.radioChoose?(e=JSON.parse(localStorage.radioChoose),a=JSON.parse(localStorage.checkboxChoose),n=JSON.parse(localStorage.inputValue),f(),d()):window.location.href=$("body").data("src")},v=function(){i[0].obj=r,l(),u()};v()},a=function(t){var e=this,a=t,n=a.find(".plans__item"),r=a.find('input[type="radio"]'),i=$(window),o=function(){i.on({load:function(){s()}}),r.on({change:function(){var t=$(this),e=t.parents(".plans__item");e.hasClass("active")||(n.removeClass("active"),e.addClass("active"))}}),n.on({click:function(){var t=$(this),e=t.find('input[type="radio"]:first');t.hasClass("active")||(n.removeClass("active"),t.addClass("active"),e.trigger("click"))}})},s=function(){var t=r.filter(":checked"),e=t.parents(".plans__item");e.addClass("active")},c=function(){a[0].obj=e,o()};c()}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LmNoZWNrb3V0LmpzIl0sIm5hbWVzIjpbIiQiLCJlYWNoIiwiQ2xvdWRzQW5pbWF0ZWQiLCJ0aGlzIiwiR3V5QW5pbWF0ZWQiLCJDb250ZW50RnVsbEhlaWdodCIsIlBsYW5zQ2hvb3NlSGVpZ2h0Iiwib2JqIiwiX3NlbGYiLCJfb2JqIiwiX2l0ZW1zIiwiX3dpbmRvdyIsIndpbmRvdyIsIl9hZGRFdmVudHMiLCJ3aWR0aCIsIm9uIiwicmVzaXplIiwiX2NoZWNrUHV0SW5XaW5kb3ciLCJfY2hlY2tTY3JvbGwiLCJsb2FkIiwic2Nyb2xsIiwic2Nyb2xsUG9pbnQiLCJ0b3BQb3MiLCJvZmZzZXQiLCJ0b3AiLCJzdGFydCIsImhlaWdodCIsImVuZCIsIngiLCJzY3JvbGxUb3AiLCJoYXNDbGFzcyIsIl9hbmltYXRpb25FbGVtcyIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImN1ckVsZW0iLCJ0cmFuc2xhdGVGaW5pc2giLCJjc3MiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImhlaWdodFdpbiIsImhlaWdodFNpdGUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiX2luaXQiLCJfaGFuZCIsImZpbmQiLCJfZ2xvYmFsV2lkdGgiLCJfY2hlY2tHZXRJbldpbmRvdyIsIndpbmRvd0giLCJzY3JvbGxUb3BXaW4iLCJoZWlnaHRPYmoiLCJwb3NpdGlvbk9iaiIsInNlZ21lbnQiLCJyb3RhdGVTdGFydCIsImRhdGEiLCJyb3RhdGVGaW5pc2giLCJrb2ZSb3RhdGUiLCJfaGVhZGVyIiwiX3NldEhlaWdodCIsImhlYWRlckhlaWd0aCIsIm1pbi1oZWlnaHQiLCJfY2FwdGlvbiIsIl9jb250ZW50IiwiX2NhcHRpb25IZWlnaHRzIiwiX2NvbnRlbnRIZWlnaHRzIiwiaW5uZXJIZWlnaHQiLCJwdXNoIiwibWF4SGVpZ2h0Q2FwdGlvbiIsIk1hdGgiLCJtYXgiLCJhcHBseSIsIm1heEhlaWdodENvbnRlbnQiLCJDaG9vc2VEYXRhIiwiUGFzdGVEYXRhIiwiRGF0ZVBsYW4iLCJfaW5wdXQiLCJfcmVkaXJlY3RCdG4iLCJfZGF0YVJhZGlvIiwiX2RhdGFDaGVja2JveCIsIl9kYXRhSW5wdXQiLCJfaWRJdGVtcyIsIl92YWx1ZUlucHV0SXRlbXMiLCJjbGljayIsImF0dHIiLCJfZ2V0RGF0YSIsIl93cml0ZUluU2Vzc2lvblN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImtleXVwIiwia2V5ZG93biIsImUiLCJpbkFycmF5Iiwia2V5Q29kZSIsImN0cmxLZXkiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwiY3VySXRlbSIsImRhdGFTcmMiLCJfd3JpdGVBbGxJZCIsImxvY2F0aW9uIiwiaHJlZiIsImVsZW0iLCJwYXJlbnRzIiwibGVuZ3RoIiwicmF0ZVBsYW4iLCJzZXNzaW9uVHlwZSIsInZhbHVlIiwiaXMiLCJ2YWwiLCJfc2V0Q2hlY2tlZE5lZWRJbnB1dCIsInVuZGVmaW5lZCIsImlkSXRlbXMiLCJwcm9wIiwiYWxsSWQiLCJwYXJzZSIsInZhbHVlSW5wdXQiLCJrZXkiLCJpdGVtIiwiZmlsdGVyIiwiY29uc29sZSIsImxvZyIsImtleTIiLCJpdGVtMSIsIl93cml0ZURhdGFJbk9iakFmdGVyTG9hZCIsIl9jaG9zZW5EYXRhIiwiX3N0ciIsIl93cml0ZUluQmxvY2siLCJkaXZSYXRlIiwibnVtIiwiYXJyIiwic3BsaXQiLCJtaW51dGVzIiwicmVwbGFjZSIsImtleTEiLCJpdGVtMiIsImhhc093blByb3BlcnR5IiwiaHRtbCIsIl93cml0ZUluSGlkZGVuIiwia2V5MyIsIml0ZW0zIiwiaXRlbTQiLCJrZXk0IiwiX2dldFNlc3Npb25EYXRhIiwicmFkaW9DaG9vc2UiLCJjaGVja2JveENob29zZSIsImlucHV0VmFsdWUiLCJfcmFkaW8iLCJfc2V0QWN0aXZlQ2xhc3MiLCJjaGFuZ2UiLCJwYXJlbnQiLCJmaXJzdFJhZGlvIiwidHJpZ2dlciIsImFjdGl2ZVJh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QUFRSSxJQUNKSSxLQUFNLFdBRUZrSSxPQUtSRCxFQUFPckksSUFDSHVJLE9BQVEsV0FFSixHQUFJcEQsR0FBVWxHLEVBQUVHLE1BQ1pvSixFQUFTckQsRUFBUU0sUUFBUSxlQUV0QitDLEdBQU96SCxTQUFTLFlBRW5CcEIsRUFBT2dDLFlBQVksVUFDbkI2RyxFQUFPOUcsU0FBUyxjQU81Qi9CLEVBQU9LLElBQ0htRSxNQUFPLFdBRUgsR0FBSWdCLEdBQVVsRyxFQUFFRyxNQUNacUosRUFBYXRELEVBQVFyRCxLQUFLLDRCQUV2QnFELEdBQVFwRSxTQUFTLFlBRXBCcEIsRUFBT2dDLFlBQVksVUFDbkJ3RCxFQUFRekQsU0FBUyxVQUNqQitHLEVBQVdDLFFBQVEsY0FRbkNKLEVBQWtCLFdBRWQsR0FBSUssR0FBY04sRUFBTzVCLE9BQU8sWUFDNUIrQixFQUFTRyxFQUFZbEQsUUFBUSxlQUU3QitDLEdBQU85RyxTQUFTLFdBR3hCRSxFQUFRLFdBRUpsQyxFQUFLLEdBQUdGLElBQU1DLEVBQ2RLLElBR1I4QiIsImZpbGUiOiJjaGVja291dC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKSB7XG5cbiAgICAkKCBmdW5jdGlvbigpIHtcblxuICAgICAgICAkLmVhY2goICQoJy5jbG91ZHMnKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgQ2xvdWRzQW5pbWF0ZWQoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcuZ3V5JyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEd1eUFuaW1hdGVkKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnNpdGVfX2NvbnRlbnRfZnVsbCcpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBDb250ZW50RnVsbEhlaWdodCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkLmVhY2goICQoJy5wbGFucycpLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBQbGFuc0Nob29zZUhlaWdodCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBDbG91ZHNBbmltYXRlZCA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9pdGVtcyA9IF9vYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tQdXRJbldpbmRvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIHZhciB0b3BQb3MgPSBfb2JqLm9mZnNldCgpLnRvcCAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdG9wUG9zIC0gX3dpbmRvdy5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdG9wUG9zICsgX29iai5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9ICggZW5kIC0gX3dpbmRvdy5zY3JvbGxUb3AoKSApIC8gKCBlbmQgLSAgc3RhcnQgKTtcblxuICAgICAgICAgICAgICAgIGlmICggeCA+IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAwO1xuXG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB4IDwgMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDE7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggKCB4IDwgMSApICYmICggeCA+IDAgKSApe1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMSAtIHg7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoICBfb2JqLmhhc0NsYXNzKCdwdXR0ZWQtYWxsJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAwLjU7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfYW5pbWF0aW9uRWxlbXMoIHN0YXJ0LCBlbmQsIHNjcm9sbFBvaW50ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYW5pbWF0aW9uRWxlbXMgPSBmdW5jdGlvbiAoIHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBzY3JvbGxQb2ludCApIHtcblxuICAgICAgICAgICAgICAgIF9pdGVtcy5lYWNoKCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckVsZW0gPSAkKCB0aGlzICksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVTdGFydCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVGaW5pc2ggPSAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VyRWxlbS5oYXNDbGFzcygnY2xvdWRzXzEnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNjcm9sbFBvaW50ID09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uY3NzKCB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIC10cmFuc2xhdGVGaW5pc2ggKiB4ICkrICclKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggLXRyYW5zbGF0ZUZpbmlzaCAqIHggKSsgJyUpJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc2Nyb2xsUG9pbnQgPT0gMSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5jc3MoIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggLXRyYW5zbGF0ZUZpbmlzaCAqIHggKSsgJyUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCAtdHJhbnNsYXRlRmluaXNoICogeCApKyAnJSknXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoIHNjcm9sbFBvaW50IDwgMC41ICYmIHNjcm9sbFBvaW50ID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjdXJFbGVtLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIHNjcm9sbFBvaW50ICogMjAwICogeCApKyAnJSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsoIHNjcm9sbFBvaW50ICogMjAwICogeCApKyAnJSknXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCBzY3JvbGxQb2ludCA+PSAwLjUgJiYgc2Nyb2xsUG9pbnQgPCAwLjggKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgY3VyRWxlbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCB0cmFuc2xhdGVGaW5pc2ggKiB4ICkrICclKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggdHJhbnNsYXRlRmluaXNoICogeCApKyAnJSknXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoIHNjcm9sbFBvaW50ID49IDAuOCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBzY3JvbGxQb2ludCA9IDEuMyAtIHNjcm9sbFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGN1ckVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggc2Nyb2xsUG9pbnQgKiAyMDAgKiB4ICkrICclKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyggc2Nyb2xsUG9pbnQgKiAyMDAgKiB4ICkrICclKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzY3JvbGxQb2ludCA+PSAwLjUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDEgLSBzY3JvbGxQb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcygge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCBzY3JvbGxQb2ludCAqIDIwMCAqIHggKSsgJyUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArKCBzY3JvbGxQb2ludCAqIDIwMCAqIHggKSsgJyUpJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tQdXRJbldpbmRvdyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodFdpbiA9IF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodFNpdGUgPSAkKCcuc2l0ZScpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGhlaWdodFNpdGUgPD0gaGVpZ2h0V2luICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoJ3B1dHRlZC1hbGwnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygncHV0dGVkLWFsbCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfY2hlY2tQdXRJbldpbmRvdygpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBHdXlBbmltYXRlZCA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9oYW5kID0gX29iai5maW5kKCcuZ3V5X19oYW5kJyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2dsb2JhbFdpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX2dsb2JhbFdpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaWR0aCA9IF93aW5kb3cud2lkdGgoKSArIDE7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hhbmQuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tQdXRJbldpbmRvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrR2V0SW5XaW5kb3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfd2luZG93LndpZHRoKCkgPj0gNzY4KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIID0gX3dpbmRvdy5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9wUG9zID0gX29iai5vZmZzZXQoKS50b3AsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gX2hhbmQub2Zmc2V0KCkudG9wIC0gd2luZG93SCxcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdG9wUG9zIC0gd2luZG93SCArIF9vYmouaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50O1xuXG4gICAgICAgICAgICAgICAgaWYoICBfb2JqLmhhc0NsYXNzKCdwdXR0ZWQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IF9oYW5kLm9mZnNldCgpLnRvcCAtIHdpbmRvd0gvMjtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gd2luZG93SC8yLjU7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9ICggZW5kIC0gX3dpbmRvdy5zY3JvbGxUb3AoKSApIC8gKCBlbmQgLSAgc3RhcnQgKTtcblxuICAgICAgICAgICAgICAgIGlmICggeCA+IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAwO1xuXG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB4IDwgMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb2ludCA9IDE7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggKCB4IDwgMSApICYmICggeCA+IDAgKSApe1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvaW50ID0gMSAtIHg7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoICBfb2JqLmhhc0NsYXNzKCdwdXR0ZWQtYWxsJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9pbnQgPSAxO1xuXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBfYW5pbWF0aW9uRWxlbXMoIHN0YXJ0LCBlbmQsIHNjcm9sbFBvaW50ICk7XG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGVja0dldEluV2luZG93ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0V2luID0gX3dpbmRvdy5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wV2luID1fd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRPYmogPSBfaGFuZC5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25PYmogPSBfaGFuZC5vZmZzZXQoKS50b3A7XG5cbiAgICAgICAgICAgICAgICBpZiggKCBoZWlnaHRPYmogKyBwb3NpdGlvbk9iaiA8IGhlaWdodFdpbiArIHNjcm9sbFRvcFdpbiApICYmICQoJy5zaXRlJykuaGVpZ2h0KCkgPiBoZWlnaHRXaW4gKiAyICApIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCdwdXR0ZWQnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygncHV0dGVkJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2hlY2tQdXRJbldpbmRvdyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodFdpbiA9IF93aW5kb3cuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodFNpdGUgPSAkKCcuc2l0ZScpLmhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGhlaWdodFNpdGUgPD0gaGVpZ2h0V2luICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoJ3B1dHRlZC1hbGwnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcygncHV0dGVkLWFsbCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FuaW1hdGlvbkVsZW1zID0gZnVuY3Rpb24gKCBzdGFydFBvaW50LCBlbmRQb2ludCwgc2Nyb2xsUG9pbnQgKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VnbWVudCA9IGVuZFBvaW50IC0gc3RhcnRQb2ludDtcblxuICAgICAgICAgICAgICAgIF9oYW5kLmVhY2goIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRWxlbSA9ICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVN0YXJ0ID0gY3VyRWxlbS5kYXRhKCdyb3RhdGUtc3RhcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUZpbmlzaCA9IGN1ckVsZW0uZGF0YSgncm90YXRlLWZpbmlzaCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAga29mUm90YXRlID0gcm90YXRlU3RhcnQgKyAoIHJvdGF0ZUZpbmlzaCAtIHJvdGF0ZVN0YXJ0ICkgLyBzZWdtZW50ICogKCBfd2luZG93LnNjcm9sbFRvcCgpIC0gc3RhcnRQb2ludCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2Nyb2xsUG9pbnQgPT0gMSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAncm90YXRlKCAnKyAoIC1yb3RhdGVGaW5pc2ggKSArJ2RlZyApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAtcm90YXRlRmluaXNoICkgKydkZWcgKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9fb2JqLnJlbW92ZUNsYXNzKCdwdXR0ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzY3JvbGxQb2ludCA9PSAwICkge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAtcm90YXRlU3RhcnQgKSArJ2RlZyApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3JvdGF0ZSggJysgKCAtcm90YXRlU3RhcnQgKSArJ2RlZyApJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL19vYmoucmVtb3ZlQ2xhc3MoJ3B1dHRlZCcpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRWxlbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAncm90YXRlKCAnKyAoIC1rb2ZSb3RhdGUgKSsnZGVnICknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAncm90YXRlKCAnKyAoIC1rb2ZSb3RhdGUgKSArJ2RlZyApJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9jaGVja0dldEluV2luZG93KCk7XG4gICAgICAgICAgICAgICAgX2NoZWNrUHV0SW5XaW5kb3coKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbiAgICB2YXIgQ29udGVudEZ1bGxIZWlnaHQgPSBmdW5jdGlvbiAoIG9iaiApIHtcblxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpO1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlckhlaWd0aCA9IF9oZWFkZXIuaGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmhlaWdodCggX3dpbmRvdy5oZWlnaHQoKSAtIGhlYWRlckhlaWd0aCApO1xuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogX29iai5maW5kKCc+ZGl2OmZpcnN0JykuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBQbGFuc0Nob29zZUhlaWdodCA9IGZ1bmN0aW9uICggb2JqICkge1xuXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9jYXB0aW9uID0gX29iai5maW5kKCcucGxhbnNfX2xpc3RfY2FwdGlvbicpLFxuICAgICAgICAgICAgX2NvbnRlbnQgPSBfb2JqLmZpbmQoJy5wbGFuc19fbGlzdC1yb3c6bm90KC5wbGFuc19fbGlzdF9jYXB0aW9uKScpLFxuICAgICAgICAgICAgX2NhcHRpb25IZWlnaHRzID0gW10sXG4gICAgICAgICAgICBfY29udGVudEhlaWdodHMgPSBbXTtcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NhcHRpb24uY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnQuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9jYXB0aW9uSGVpZ2h0cyA9IFtdO1xuICAgICAgICAgICAgICAgIF9jb250ZW50SGVpZ2h0cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgX2NhcHRpb24uZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9ICQodGhpcykuaW5uZXJIZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfY2FwdGlvbkhlaWdodHMucHVzaCggaGVpZ2h0ICk7XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWF4SGVpZ2h0Q2FwdGlvbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF9jYXB0aW9uSGVpZ2h0cyk7XG5cblxuICAgICAgICAgICAgICAgIF9jb250ZW50LmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSAkKHRoaXMpLmlubmVySGVpZ2h0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbnRlbnRIZWlnaHRzLnB1c2goIGhlaWdodCApO1xuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1heEhlaWdodENvbnRlbnQgPSBNYXRoLm1heC5hcHBseShNYXRoLCBfY29udGVudEhlaWdodHMpO1xuXG4gICAgICAgICAgICAgICAgX2NhcHRpb24uaW5uZXJIZWlnaHQoIG1heEhlaWdodENhcHRpb24gKTtcbiAgICAgICAgICAgICAgICBfY29udGVudC5pbm5lckhlaWdodCggbWF4SGVpZ2h0Q29udGVudCApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuKCBmdW5jdGlvbigpIHtcblxuICAgICQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICQuZWFjaCggJCgnLmNob29zZS1kYXRhJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IENob29zZURhdGEoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCcub3JkZXInKSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgUGFzdGVEYXRhKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCgnLnBsYW5zJyksIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IERhdGVQbGFuKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIENob29zZURhdGEgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaXRlbXMgPSBfb2JqLmZpbmQoJy5jaG9vc2UtZGF0YV9faXRlbXMnKSxcbiAgICAgICAgICAgIF9pbnB1dCA9IF9pdGVtcy5maW5kKCdpbnB1dCcpLFxuICAgICAgICAgICAgX3JlZGlyZWN0QnRuID0gX29iai5maW5kKCcuYnRuX25leHQnKSxcbiAgICAgICAgICAgIF9kYXRhUmFkaW8gPSB7fSxcbiAgICAgICAgICAgIF9kYXRhQ2hlY2tib3ggPSB7fSxcbiAgICAgICAgICAgIF9kYXRhSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIF9pZEl0ZW1zID0ge30sXG4gICAgICAgICAgICBfdmFsdWVJbnB1dEl0ZW1zID0ge307XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggISgkKHRoaXMpLmF0dHIoJ3R5cGUnKSA9PT0gJ3RleHQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nZXREYXRhKCAkKHRoaXMpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5TZXNzaW9uU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lkSXRlbXMnLCBKU09OLnN0cmluZ2lmeShfaWRJdGVtcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh0aGlzKS5hdHRyKCd0eXBlJykgPT09ICd0ZXh0JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nZXREYXRhKCAkKHRoaXMpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5TZXNzaW9uU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lkSXRlbXMnLCBKU09OLnN0cmluZ2lmeShfaWRJdGVtcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd2YWx1ZUlucHV0JywgSlNPTi5zdHJpbmdpZnkoX3ZhbHVlSW5wdXRJdGVtcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQodGhpcykuaGFzQ2xhc3MoJ3NpdGVfX2lucHV0X251bScpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShlLmtleUNvZGUsIFs0NiwgOCwgOSwgMjcsIDEzLCAxMTAsIDE5MF0pICE9PSAtMSB8fFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPT0gNjUgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPT0gNjcgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPT0gODggJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLmtleUNvZGUgPj0gMzUgJiYgZS5rZXlDb2RlIDw9IDM5KSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGUuc2hpZnRLZXkgfHwgKGUua2V5Q29kZSA8IDQ4IHx8IGUua2V5Q29kZSA+IDU3KSkgJiYgKGUua2V5Q29kZSA8IDk2IHx8IGUua2V5Q29kZSA+IDEwNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3JlZGlyZWN0QnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTcmMgPSBjdXJJdGVtLmRhdGEoJ3NyYycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVBbGxJZCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRhdGFTcmM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldERhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcblxuICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJyApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5wYXJlbnRzKCcucGxhbnMnKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9kYXRhUmFkaW8ucmF0ZVBsYW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblR5cGU6IGN1ckl0ZW0uZGF0YSgncmF0ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJJdGVtLmF0dHIoJ3ZhbHVlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cigndmFsdWUnKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2lkSXRlbXNbY3VySXRlbS5hdHRyKCduYW1lJyldID0gY3VySXRlbS5hdHRyKCdpZCcpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ2NoZWNrYm94JyApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGN1ckl0ZW0uaXMoXCI6Y2hlY2tlZFwiKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFDaGVja2JveFtjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaWRJdGVtc1tjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9kYXRhQ2hlY2tib3hbY3VySXRlbS5hdHRyKCduYW1lJyldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9pZEl0ZW1zW2N1ckl0ZW0uYXR0cignbmFtZScpXTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3RleHQnICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggY3VySXRlbS52YWwoKSAhPSAnJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFJbnB1dFtjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2lkSXRlbXNbY3VySXRlbS5hdHRyKCduYW1lJyldID0gY3VySXRlbS5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbHVlSW5wdXRJdGVtc1tjdXJJdGVtLmF0dHIoJ2lkJyldID0gY3VySXRlbS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX2RhdGFJbnB1dFtjdXJJdGVtLmF0dHIoJ25hbWUnKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX2lkSXRlbXNbY3VySXRlbS5hdHRyKCduYW1lJyldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF92YWx1ZUlucHV0SXRlbXNbY3VySXRlbS5hdHRyKCdpZCcpXTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldENoZWNrZWROZWVkSW5wdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBsb2NhbFN0b3JhZ2UuaWRJdGVtcyAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2lucHV0LmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ2NoZWNrYm94JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucHJvcCgnY2hlY2tlZCcsIGZhbHNlICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggY3VySXRlbS5hdHRyKCd0eXBlJykgPT09ICd0ZXh0JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0udmFsKCcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYWxsSWQgPSBKU09OLnBhcnNlKCBsb2NhbFN0b3JhZ2UuaWRJdGVtcyksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlSW5wdXQgPSBKU09OLnBhcnNlKCBsb2NhbFN0b3JhZ2UudmFsdWVJbnB1dCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGtleSBpbiBhbGxJZCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gYWxsSWRbIGtleSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQuZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmZpbHRlcignIycrIGl0ZW0gKycnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaXRlbSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3RleHQnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGtleTIgaW4gdmFsdWVJbnB1dCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtMSA9IHZhbHVlSW5wdXRbIGtleTIgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5maWx0ZXIoJyMnKyBpdGVtICsnJykudmFsKCBpdGVtMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfd3JpdGVBbGxJZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2lucHV0LmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5pcyhcIjpjaGVja2VkXCIpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5hdHRyKCd0eXBlJykgPT09ICdyYWRpbycgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaWRJdGVtc1tjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggY3VySXRlbS5hdHRyKCd0eXBlJykgPT09ICdjaGVja2JveCcgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5pcyhcIjpjaGVja2VkXCIpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZEl0ZW1zW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cignaWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9pZEl0ZW1zW2N1ckl0ZW0uYXR0cignbmFtZScpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3RleHQnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS52YWwoKSAhPSAnJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZEl0ZW1zW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmFsdWVJbnB1dEl0ZW1zW2N1ckl0ZW0uYXR0cignaWQnKV0gPSBjdXJJdGVtLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9pZEl0ZW1zW2N1ckl0ZW0uYXR0cignbmFtZScpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3ZhbHVlSW5wdXRJdGVtc1tjdXJJdGVtLmF0dHIoJ2lkJyldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd2YWx1ZUlucHV0JywgSlNPTi5zdHJpbmdpZnkoX3ZhbHVlSW5wdXRJdGVtcykpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpZEl0ZW1zJywgSlNPTi5zdHJpbmdpZnkoX2lkSXRlbXMpKTtcblxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlRGF0YUluT2JqQWZ0ZXJMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQuZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmlzKFwiOmNoZWNrZWRcIikgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLnBhcmVudHMoJy5wbGFucycpLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvLnJhdGVQbGFuID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblR5cGU6IGN1ckl0ZW0uZGF0YSgncmF0ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1ckl0ZW0uYXR0cigndmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGF0YVJhZGlvW2N1ckl0ZW0uYXR0cignbmFtZScpXSA9IGN1ckl0ZW0uYXR0cigndmFsdWUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmF0dHIoJ3R5cGUnKSA9PT0gJ2NoZWNrYm94JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmlzKFwiOmNoZWNrZWRcIikgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGFDaGVja2JveFtjdXJJdGVtLmF0dHIoJ25hbWUnKV0gPSBjdXJJdGVtLmF0dHIoJ3ZhbHVlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfZGF0YUNoZWNrYm94W2N1ckl0ZW0uYXR0cignbmFtZScpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uYXR0cigndHlwZScpID09PSAndGV4dCcgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VySXRlbS52YWwoKSAhPSAnJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kYXRhSW5wdXRbY3VySXRlbS5hdHRyKCduYW1lJyldID0gY3VySXRlbS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfZGF0YUlucHV0W2N1ckl0ZW0uYXR0cignbmFtZScpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfd3JpdGVJblNlc3Npb25TdG9yYWdlKCk7XG4gICAgICAgICAgICAgICAgX3dyaXRlQWxsSWQoKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF93cml0ZUluU2Vzc2lvblN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyYWRpb0Nob29zZScsIEpTT04uc3RyaW5naWZ5KF9kYXRhUmFkaW8pKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2hlY2tib3hDaG9vc2UnLCBKU09OLnN0cmluZ2lmeShfZGF0YUNoZWNrYm94KSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lucHV0VmFsdWUnLCBKU09OLnN0cmluZ2lmeShfZGF0YUlucHV0KSk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9vYmpbMF0ub2JqID0gX3NlbGY7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9zZXRDaGVja2VkTmVlZElucHV0KCk7XG4gICAgICAgICAgICAgICAgX3dyaXRlRGF0YUluT2JqQWZ0ZXJMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFBhc3RlRGF0YSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9jaG9zZW5EYXRhID0gX29iai5maW5kKCcub3JkZXJfX2Nob3Nlbi1kYXRhIHNwYW4nKSxcbiAgICAgICAgICAgIF9kYXRhUmFkaW8sXG4gICAgICAgICAgICBfZGF0YUNoZWNrYm94LFxuICAgICAgICAgICAgX2RhdGFJbnB1dCxcbiAgICAgICAgICAgIF9pbnB1dCA9IF9vYmouZmluZCgnaW5wdXQjaW5wdXRfMV81JyksXG4gICAgICAgICAgICBfYXJyID0gW10sXG4gICAgICAgICAgICBfc3RyID0gJyc7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cblxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlSW5CbG9jayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGRpdlJhdGUgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgbnVtID0gJycsXG4gICAgICAgICAgICAgICAgICAgIGFyciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIga2V5IGluIF9kYXRhUmFkaW8gICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX2RhdGFSYWRpb1sga2V5IF0gKyAnLCAnO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIF9kYXRhUmFkaW8ucmF0ZVBsYW4gIT0gdW5kZWZpbmVkICkge1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCggX2RhdGFSYWRpby5yYXRlUGxhbiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9kYXRhUmFkaW8ucmF0ZVBsYW4udmFsdWUuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9kYXRhUmFkaW8ucmF0ZVBsYW4uc2Vzc2lvblR5cGUgPT09ICdzZXNzaW9uIHByaWNpbmcnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2UmF0ZSA9ICc8c3Bhbj4nKyBfZGF0YVJhZGlvLnJhdGVQbGFuLnNlc3Npb25UeXBlICsnICgnKyB2YWx1ZVswXSArJyBzZXNzaW9ucyk8L3NwYW4+JyArICcsICc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX2RhdGFSYWRpby5yYXRlUGxhbi5zZXNzaW9uVHlwZSA9PT0gJ21pbnV0ZSBwcmljaW5nJyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaW51dGVzID0gdmFsdWVbMF0ucmVwbGFjZSgvW14wLTldKy9nLCcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBtaW51dGVzID4gMTAwMDAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBtaW51dGVzLzEwMDAwMDAgKyAnTSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdlJhdGUgPSAnPHNwYW4+JysgX2RhdGFSYWRpby5yYXRlUGxhbi5zZXNzaW9uVHlwZSArJyAoJysgbWludXRlcyArJyBtaW51dGVzICgnICsgdmFsdWVbMl0gKyAnL21pbnV0ZSk8L3NwYW4+JyArICcsICc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBkaXZSYXRlID09ICcnICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGRpdlJhdGUgPSAnJztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciggdmFyIGtleTEgaW4gX2RhdGFDaGVja2JveCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goa2V5MSlcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBhcnIubGVuZ3RoID4gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggYXJyLmxlbmd0aCA9PSAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBudW0gPSAnKyAnICsgYXJyLmxlbmd0aCArICcgc2VydmljZSc7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtID0gJysgJyArIGFyci5sZW5ndGggKyAnIHNlcnZpY2UnO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpdGVtMiA9ICcnO1xuXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIga2V5MiBpbiBfZGF0YUlucHV0ICApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoX2RhdGFJbnB1dC5oYXNPd25Qcm9wZXJ0eShrZXkyKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtMiA9IF9kYXRhSW5wdXRbIGtleTIgXSAgKyAnICc7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTIgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBkaXZSYXRlID09ICcnICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9jaG9zZW5EYXRhLmh0bWwoJ1lvdSBjaG9zZSAnICsgaXRlbSArICdwb3J0czogJyArIGl0ZW0yICsgbnVtICsgJy4nKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2Nob3NlbkRhdGEuaHRtbCgnWW91IGNob3NlICcgKyBkaXZSYXRlICsgaXRlbSArIG51bSArICcpLicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9zdHIgPSAnJztcblxuICAgICAgICAgICAgICAgIGZvciggdmFyIGtleSBpbiBfZGF0YVJhZGlvICApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9kYXRhUmFkaW9bIGtleSBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdHIgKz0gJycrIGl0ZW0gKyc7ICdcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIga2V5MSBpbiBpdGVtICApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtMSA9IGl0ZW1bIGtleTEgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdHIgKz0gJycrIGl0ZW0xICsnOyAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IoIHZhciBrZXkzIGluIF9kYXRhQ2hlY2tib3ggICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtMyA9IF9kYXRhQ2hlY2tib3hbIGtleTMgXTtcblxuICAgICAgICAgICAgICAgICAgICBfc3RyICs9ICcnKyBpdGVtMyArJzsgJ1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW00ID0gJyc7XG5cbiAgICAgICAgICAgICAgICBmb3IoIHZhciBrZXk0IGluIF9kYXRhSW5wdXQgICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGF0YUlucHV0Lmhhc093blByb3BlcnR5KGtleTQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW00ID0gX2RhdGFJbnB1dFsga2V5NCBdO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW00ID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zdHIgKz0gJycrIGl0ZW00ICsnOyAnXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfc3RyICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZ2V0U2Vzc2lvbkRhdGEgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBsb2NhbFN0b3JhZ2UucmFkaW9DaG9vc2UgIT0gdW5kZWZpbmVkICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9kYXRhUmFkaW8gPSBKU09OLnBhcnNlKCBsb2NhbFN0b3JhZ2UucmFkaW9DaG9vc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgX2RhdGFDaGVja2JveCA9IEpTT04ucGFyc2UoIGxvY2FsU3RvcmFnZS5jaGVja2JveENob29zZSApO1xuICAgICAgICAgICAgICAgICAgICBfZGF0YUlucHV0ID0gSlNPTi5wYXJzZSggbG9jYWxTdG9yYWdlLmlucHV0VmFsdWUgKTtcblxuICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbigpO1xuICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkJsb2NrKCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJCgnYm9keScpLmRhdGEoJ3NyYycpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfZ2V0U2Vzc2lvbkRhdGEoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIERhdGVQbGFuID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcucGxhbnNfX2l0ZW0nKSxcbiAgICAgICAgICAgIF9yYWRpbyA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX3NldEFjdGl2ZUNsYXNzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIF9yYWRpby5vbigge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnRzKCcucGxhbnNfX2l0ZW0nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEoIHBhcmVudC5oYXNDbGFzcygnYWN0aXZlJykgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVtcy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfaXRlbXMub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RSYWRpbyA9IGN1ckl0ZW0uZmluZCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdOmZpcnN0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKCBjdXJJdGVtLmhhc0NsYXNzKCdhY3RpdmUnKSApICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZW1zLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFJhZGlvLnRyaWdnZXIoJ2NsaWNrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEFjdGl2ZUNsYXNzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlUmFkaW8gPSBfcmFkaW8uZmlsdGVyKCc6Y2hlY2tlZCcpLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBhY3RpdmVSYWRpby5wYXJlbnRzKCcucGxhbnNfX2l0ZW0nKTtcblxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
