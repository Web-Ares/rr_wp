"use strict";!function(){$(function(){$.each($(".learn-more"),function(){new t($(this))}),$.each($(".site__anchors"),function(){new n($(this))}),$.each($(".host__offer-date"),function(){new e($(this))})});var t=function(t){var n=this,e=t,o=$("html, body"),i=e,a=function(){i.on({click:function(){return c($(this)),!1}})},c=function(t){var n=t,e=n.parents('[data-more="true"]'),i=e.next(),a=i.offset().top;o.animate({scrollTop:a},300)},f=function(){e[0].obj=n,a()};f()},n=function(t){var n=this,e=t,o=$("html, body"),i=$(window),a=$('[data-anchor="true"]'),c=function(){e.find("a").on({click:function(){return r($(this)),!1}}),i.on({scroll:function(){f()}})},f=function(){var t=i.scrollTop();a.each(function(){var n=$(this),o=n.index(),a=n.offset().top;t+i.height()/2>=a&&n.innerHeight()+a>=t+i.height()/2&&(e.find("a").removeClass("active"),e.find("a").eq(o).addClass("active"))})},r=function(t){var n=t,e=n.index(),i=a.eq(e),c=i.offset().top;o.animate({scrollTop:c},300)},s=function(){e[0].obj=n,c(),f()};s()},e=function(t){var n=this,e=t,o=function(){},i=function(t,n){var o=new Date(t.getTime());(new Date).getHours()>=17&&(new Date).getMinutes()>0&&t.getDay()==n?o.setDate(t.getDate()+(7+n-t.getDay())%7+7):o.setDate(t.getDate()+(7+n-t.getDay())%7),e.html(""+(o.getMonth()+1)+"/"+o.getDate()+"/"+o.getFullYear())},a=function(){e[0].obj=n,o(),i(new Date,5)};a()}}();
"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__header"),function(){new e($(this))}),$.each($("#gform_3"),function(){new o($(this))})});var t=function(t){var n=this,o=t,e=o,s=$(window),a=(s.width(),function(){s.on({resize:function(){f(),i()},load:function(){i()},scroll:function(){i()}})}),i=function(){var t,n=o.offset().top,e=n-s.height(),a=n+o.height(),i=(a-s.scrollTop())/(a-e);i>1?t=0:i<0&&(t=1),i<1&&i>0&&(t=1-i),o.hasClass("putted-all")&&(t=.5),r(e,a,t)},r=function(t,n,o){e.each(function(){var t=$(this),n=100,e=1;t.hasClass("clouds_1")&&(e=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*e+"%)",transform:"translateX("+-n*e+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*e+"%)",transform:"translateX("+-n*e+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*e+"%)",transform:"translateX("+200*o*e+"%)"}))})},f=function(){var t=s.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},c=function(){o[0].obj=n,a(),f()};c()},n=function(t){var n=this,o=t,e=o.find(".guy__hand"),s=$(window),a=s.width(),i=function(){s.on({resize:function(){a!=s.width()&&(a=s.width()+1,s.width()<768&&e.css({"-webkit-transform":"none",transform:"none"})),c(),f(),r()},load:function(){s.width()>=768&&r()},scroll:function(){s.width()>=768&&r()}})},r=function(){var t,n=s.height(),a=o.offset().top,i=e.offset().top-n,r=a-n+o.height();o.hasClass("putted")&&(i=e.offset().top-n/2,r=n/2.5);var f=(r-s.scrollTop())/(r-i);f>1?t=0:f<0&&(t=1),f<1&&f>0&&(t=1-f),o.hasClass("putted-all")&&(t=1),d(i,r,t)},f=function(){var t=s.height(),n=s.scrollTop(),a=e.height(),i=e.offset().top;a+i<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},c=function(){var t=s.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},d=function(t,n,o){var a=n-t;e.each(function(){var n=$(this),e=n.data("rotate-start"),i=n.data("rotate-finish"),r=e+(i-e)/a*(s.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},l=function(){o[0].obj=n,i(),f(),c()};l()},o=function(t){var n=$(this),o=$("#gform_wrapper_3"),e=t,s=function(){o=o.clone(!0),$(document).bind("gform_confirmation_loaded",function(){setTimeout(function(){$(".gform_confirmation_message").remove(),$(".order__place").append(o),$("#gform_3")[0].reset(),console.log("ddd")},3e3)})},a=function(){e[0].obj=n,s()};n.clone=function(){s()},a()},e=function(t){var n=this,o=t,e=($(window),o.find(".site__header__btn")),s=o.find(".site__header-menu"),a=($(".site__content"),$("html")),i=function(){o.removeClass("opened"),a.css({"overflow-y":"auto"}),s.attr("style","")},r=function(){e.on({click:function(){return o.hasClass("opened")?i():f(),!1}})},f=function(){o.addClass("opened"),a.css({"overflow-y":"hidden"})},c=function(){r(),o[0].obj=n};c()}}();
//# sourceMappingURL=data:application/json;base64,
