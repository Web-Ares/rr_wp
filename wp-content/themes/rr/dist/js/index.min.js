"use strict";!function(){$(function(){$.each($(".learn-more"),function(){new t($(this))}),$.each($(".site__anchors"),function(){new n($(this))}),$.each($(".host__offer-date"),function(){new e($(this))})});var t=function(t){var n=this,e=t,o=$("html, body"),i=e,a=function(){i.on({click:function(){return c($(this)),!1}})},c=function(t){var n=t,e=n.parents('[data-more="true"]'),i=e.next(),a=i.offset().top;o.animate({scrollTop:a},300)},f=function(){e[0].obj=n,a()};f()},n=function(t){var n=this,e=t,o=$("html, body"),i=$(window),a=$('[data-anchor="true"]'),c=function(){e.find("a").on({click:function(){return r($(this)),!1}}),i.on({scroll:function(){f()}})},f=function(){var t=i.scrollTop();a.each(function(){var n=$(this),o=n.index(),a=n.offset().top;t+i.height()/2>=a&&n.innerHeight()+a>=t+i.height()/2&&(e.find("a").removeClass("active"),e.find("a").eq(o).addClass("active"))})},r=function(t){var n=t,e=n.index(),i=a.eq(e),c=i.offset().top;o.animate({scrollTop:c},300)},s=function(){e[0].obj=n,c(),f()};s()},e=function(t){var n=this,e=t,o=function(){},i=function(t,n){var o=new Date(t.getTime());(new Date).getHours()>=17&&(new Date).getMinutes()>0&&t.getDay()==n?o.setDate(t.getDate()+(7+n-t.getDay())%7+7):o.setDate(t.getDate()+(7+n-t.getDay())%7),e.html(""+(o.getMonth()+1)+"/"+o.getDate()+"/"+o.getFullYear())},a=function(){e[0].obj=n,o(),i(new Date,5)};a()}}();
"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__header"),function(){new s($(this))})});var t=function(t){var n=this,s=t,o=s,e=$(window),a=(e.width(),function(){e.on({resize:function(){f(),i()},load:function(){i()},scroll:function(){i()}})}),i=function(){var t,n=s.offset().top,o=n-e.height(),a=n+s.height(),i=(a-e.scrollTop())/(a-o);i>1?t=0:i<0&&(t=1),i<1&&i>0&&(t=1-i),s.hasClass("putted-all")&&(t=.5),r(o,a,t)},r=function(t,n,s){o.each(function(){var t=$(this),n=100,o=1;t.hasClass("clouds_1")&&(o=-1),0==s?t.css({"-webkit-transform":"translateX("+-n*o+"%)",transform:"translateX("+-n*o+"%)"}):1==s?t.css({"-webkit-transform":"translateX("+-n*o+"%)",transform:"translateX("+-n*o+"%)"}):(s>=.5&&(s=1-s),t.css({"-webkit-transform":"translateX("+200*s*o+"%)",transform:"translateX("+200*s*o+"%)"}))})},f=function(){var t=e.height(),n=$(".site").height();n<=t?s.addClass("putted-all"):s.removeClass("putted-all")},c=function(){s[0].obj=n,a(),f()};c()},n=function(t){var n=this,s=t,o=s.find(".guy__hand"),e=$(window),a=e.width(),i=function(){e.on({resize:function(){a!=e.width()&&(a=e.width()+1,e.width()<768&&o.css({"-webkit-transform":"none",transform:"none"})),c(),f(),r()},load:function(){e.width()>=768&&r()},scroll:function(){e.width()>=768&&r()}})},r=function(){var t,n=e.height(),a=s.offset().top,i=o.offset().top-n,r=a-n+s.height();s.hasClass("putted")&&(i=o.offset().top-n/2,r=n/2.5);var f=(r-e.scrollTop())/(r-i);f>1?t=0:f<0&&(t=1),f<1&&f>0&&(t=1-f),s.hasClass("putted-all")&&(t=1),h(i,r,t)},f=function(){var t=e.height(),n=e.scrollTop(),a=o.height(),i=o.offset().top;a+i<t+n&&$(".site").height()>2*t?s.addClass("putted"):s.removeClass("putted")},c=function(){var t=e.height(),n=$(".site").height();n<=t?s.addClass("putted-all"):s.removeClass("putted-all")},h=function(t,n,s){var a=n-t;o.each(function(){var n=$(this),o=n.data("rotate-start"),i=n.data("rotate-finish"),r=o+(i-o)/a*(e.scrollTop()-t);1==s?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):0==s?n.css({"-webkit-transform":"rotate( "+-o+"deg )",transform:"rotate( "+-o+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},l=function(){s[0].obj=n,i(),f(),c()};l()},s=function(t){var n=this,s=t,o=($(window),s.find(".site__header__btn")),e=s.find(".site__header-menu"),a=($(".site__content"),$("html")),i=function(){s.removeClass("opened"),a.css({"overflow-y":"auto"}),e.attr("style","")},r=function(){o.on({click:function(){return s.hasClass("opened")?i():f(),!1}})},f=function(){s.addClass("opened"),a.css({"overflow-y":"hidden"})},c=function(){r(),s[0].obj=n};c()}}();
//# sourceMappingURL=data:application/json;base64,
