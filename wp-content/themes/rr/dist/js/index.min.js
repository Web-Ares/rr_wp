"use strict";!function(){$(function(){$.each($(".learn-more"),function(){new t($(this))}),$.each($(".site__anchors"),function(){new n($(this))}),$.each($(".host__offer"),function(){new e($(this))})});var t=function(t){var n=this,e=t,o=$("html, body"),i=e,a=function(){i.on({click:function(){return c($(this)),!1}})},c=function(t){var n=t,e=n.parents('[data-more="true"]'),i=e.next(),a=i.offset().top;o.animate({scrollTop:a},300)},f=function(){e[0].obj=n,a()};f()},n=function(t){var n=this,e=t,o=$("html, body"),i=$(window),a=$('[data-anchor="true"]'),c=function(){e.find("a").on({click:function(){return r($(this)),!1}}),i.on({scroll:function(){f()}})},f=function(){var t=i.scrollTop();a.each(function(){var n=$(this),o=n.index(),a=n.offset().top;t+i.height()/2>=a&&n.innerHeight()+a>=t+i.height()/2&&(e.find("a").removeClass("active"),e.find("a").eq(o).addClass("active"))})},r=function(t){var n=t,e=n.index(),i=a.eq(e),c=i.offset().top;o.animate({scrollTop:c},300)},s=function(){e[0].obj=n,c(),f()};s()},e=function(t){var n=this,e=t,o=e.find(".host__offer-date"),i=function(){},a=function(t,n){var e=new Date(t.getTime());(new Date).getHours()>=17&&(new Date).getMinutes()>0&&t.getDay()==n?e.setDate(t.getDate()+(7+n-t.getDay())%7+7):e.setDate(t.getDate()+(7+n-t.getDay())%7),o.html(""+(e.getMonth()+1)+"/"+e.getDate()+"/"+e.getFullYear())},c=function(){e[0].obj=n,i(),a(new Date,5)};c()}}();
"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new o($(this))}),$.each($(".plans"),function(){new i($(this))}),$.each($(".site__header"),function(){new e($(this))}),$(".popup").each(function(){new s($(this))}),$(document).bind("gform_confirmation_loaded",function(){$(".popup__request").addClass("popup__request_no-bg")})});var t=function(t){var n=this,o=t,i=o,e=$(window),s=(e.width(),function(){e.on({resize:function(){r(),a()},load:function(){a()},scroll:function(){a()}})}),a=function(){var t,n=o.offset().top,i=n-e.height(),s=n+o.height(),a=(s-e.scrollTop())/(s-i);a>1?t=0:a<0&&(t=1),a<1&&a>0&&(t=1-a),o.hasClass("putted-all")&&(t=.5),c(i,s,t)},c=function(t,n,o){i.each(function(){var t=$(this),n=100,i=1;t.hasClass("clouds_1")&&(i=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*i+"%)",transform:"translateX("+200*o*i+"%)"}))})},r=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},h=function(){o[0].obj=n,s(),r()};h()},n=function(t){var n=this,o=t,i=o.find(".guy__hand"),e=$(window),s=e.width(),a=function(){e.on({resize:function(){s!=e.width()&&(s=e.width()+1,e.width()<768&&i.css({"-webkit-transform":"none",transform:"none"})),h(),r(),c()},load:function(){e.width()>=768&&c()},scroll:function(){e.width()>=768&&c()}})},c=function(){var t,n=e.height(),s=o.offset().top,a=i.offset().top-n,c=s-n+o.height();o.hasClass("putted")&&(a=i.offset().top-n/2,c=n/2.5);var r=(c-e.scrollTop())/(c-a);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),o.hasClass("putted-all")&&(t=1),u(a,c,t)},r=function(){var t=e.height(),n=e.scrollTop(),s=i.height(),a=i.offset().top;s+a<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},h=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},u=function(t,n,o){var s=n-t;i.each(function(){var n=$(this),i=n.data("rotate-start"),a=n.data("rotate-finish"),c=i+(a-i)/s*(e.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-a+"deg )",transform:"rotate( "+-a+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):n.css({"-webkit-transform":"rotate( "+-c+"deg )",transform:"rotate( "+-c+"deg )"})})},f=function(){o[0].obj=n,a(),r(),h()};f()},o=function(t){var n=this,o=t,i=$(window),e=$(".site__header"),s=function(){i.on({resize:function(){a()}})},a=function(){var t=e.height();o.height(i.height()-t),o.css({"min-height":o.find(">div:first").height()})},c=function(){o[0].obj=n,s(),a()};c()},i=function(t){var n=this,o=t,i=$(window),e=o.find(".plans__list_caption"),s=o.find(".plans__list-row:not(.plans__list_caption)"),a=[],c=[],r=function(){i.on({load:function(){i.width()>=1024&&h()},resize:function(){i.width()<1024?(e.css({height:""}),s.css({height:""})):h()}})},h=function(){a=[],c=[],e.each(function(){var t=$(this).innerHeight();a.push(t)});var t=Math.max.apply(Math,a);s.each(function(){var t=$(this).innerHeight();c.push(t)});var n=Math.max.apply(Math,c);e.innerHeight(t),s.innerHeight(n)},u=function(){o[0].obj=n,r()};u()},e=function(t){var n=this,o=t,i=($(window),o.find(".site__header__btn")),e=o.find(".site__header-menu"),s=($(".site__content"),$("html")),a=function(){o.removeClass("opened"),s.css({"overflow-y":"auto"}),e.attr("style","")},c=function(){i.on({click:function(){return o.hasClass("opened")?a():r(),!1}})},r=function(){o.addClass("opened"),s.css({"overflow-y":"hidden"})},h=function(){c(),o[0].obj=n};h()},s=function(t){var n=this,o=40,i=$(".popup__open"),e=t,s=e.find(".popup__close, .popup__cancel"),a=e.find(".popup__wrap"),c=e.find(".popup__content"),r=$("html"),h=$(window),u=setTimeout(function(){},1),f=function(){h.height()-2*o-a.height()>0?a.css({top:(h.height()-2*o-a.height())/2}):a.css({top:0})},d=function(){var t,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),t=n.offsetWidth-n.clientWidth,document.body.removeChild(n),t},l=function(){e.css({overflowY:"hidden"}),r.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),u=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},p=function(){e[0].obj=n,_()},_=function(){h.on({resize:function(){f()}}),i.on({click:function(){return w($(this).attr("data-popup")),!1}}),a.on({click:function(t){t.stopPropagation()}}),e.on({click:function(){return l(),!1}}),s.on({click:function(){return l(),!1}})},w=function(t){g(t),r.css({overflowY:"hidden",paddingRight:d()}),e.addClass("popup_opened"),f()},g=function(t){var n=c.filter(".popup__"+t);c.css({display:"none"}),n.css({display:"block"})};p()}}();
//# sourceMappingURL=data:application/json;base64,
