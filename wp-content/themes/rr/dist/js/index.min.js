"use strict";!function(){$(function(){$.each($(".learn-more"),function(){new t($(this))}),$.each($(".site__anchors"),function(){new n($(this))}),$.each($(".host__offer"),function(){new e($(this))})});var t=function(t){var n=this,e=t,o=$("html, body"),i=e,a=function(){i.on({click:function(){return c($(this)),!1}})},c=function(t){var n=t,e=n.parents('[data-more="true"]'),i=e.next(),a=i.offset().top;o.animate({scrollTop:a},300)},f=function(){e[0].obj=n,a()};f()},n=function(t){var n=this,e=t,o=$("html, body"),i=$(window),a=$('[data-anchor="true"]'),c=function(){e.find("a").on({click:function(){return r($(this)),!1}}),i.on({scroll:function(){f()}})},f=function(){var t=i.scrollTop();a.each(function(){var n=$(this),o=n.index(),a=n.offset().top;t+i.height()/2>=a&&n.innerHeight()+a>=t+i.height()/2&&(e.find("a").removeClass("active"),e.find("a").eq(o).addClass("active"))})},r=function(t){var n=t,e=n.index(),i=a.eq(e),c=i.offset().top;o.animate({scrollTop:c},300)},s=function(){e[0].obj=n,c(),f()};s()},e=function(t){var n=this,e=t,o=e.find(".host__offer-date"),i=function(){},a=function(t,n){var e=new Date(t.getTime());17==(new Date).getHours()&&(new Date).getMinutes()>0?e.setDate(t.getDate()+(7+n-t.getDay())%7+7):e.setDate(t.getDate()+(7+n-t.getDay())%7),o.html(""+(e.getMonth()+1)+"/"+e.getDate()+"/"+e.getFullYear())},c=function(){e[0].obj=n,i(),a(new Date,5)};c()}}();
"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new i($(this))}),$.each($(".plans"),function(){new s($(this))})});var t=function(t){var n=this,i=t,s=i,o=$(window),a=(o.width(),function(){o.on({resize:function(){h(),e()},load:function(){e()},scroll:function(){e()}})}),e=function(){var t,n=i.offset().top,s=n-o.height(),a=n+i.height(),e=(a-o.scrollTop())/(a-s);e>1?t=0:e<0&&(t=1),e<1&&e>0&&(t=1-e),i.hasClass("putted-all")&&(t=.5),r(s,a,t)},r=function(t,n,i){s.each(function(){var t=$(this),n=100,s=1;t.hasClass("clouds_1")&&(s=-1),0==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):1==i?t.css({"-webkit-transform":"translateX("+-n*s+"%)",transform:"translateX("+-n*s+"%)"}):(i>=.5&&(i=1-i),t.css({"-webkit-transform":"translateX("+200*i*s+"%)",transform:"translateX("+200*i*s+"%)"}))})},h=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},f=function(){i[0].obj=n,a(),h()};f()},n=function(t){var n=this,i=t,s=i.find(".guy__hand"),o=$(window),a=o.width(),e=function(){o.on({resize:function(){a!=o.width()&&(a=o.width()+1,o.width()<768&&s.css({"-webkit-transform":"none",transform:"none"})),f(),h(),r()},load:function(){o.width()>=768&&r()},scroll:function(){o.width()>=768&&r()}})},r=function(){var t,n=o.height(),a=i.offset().top,e=s.offset().top-n,r=a-n+i.height();i.hasClass("putted")&&(e=s.offset().top-n/2,r=n/2.5);var h=(r-o.scrollTop())/(r-e);h>1?t=0:h<0&&(t=1),h<1&&h>0&&(t=1-h),i.hasClass("putted-all")&&(t=1),c(e,r,t)},h=function(){var t=o.height(),n=o.scrollTop(),a=s.height(),e=s.offset().top;a+e<t+n&&$(".site").height()>2*t?i.addClass("putted"):i.removeClass("putted")},f=function(){var t=o.height(),n=$(".site").height();n<=t?i.addClass("putted-all"):i.removeClass("putted-all")},c=function(t,n,i){var a=n-t;s.each(function(){var n=$(this),s=n.data("rotate-start"),e=n.data("rotate-finish"),r=s+(e-s)/a*(o.scrollTop()-t);1==i?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):0==i?n.css({"-webkit-transform":"rotate( "+-s+"deg )",transform:"rotate( "+-s+"deg )"}):n.css({"-webkit-transform":"rotate( "+-r+"deg )",transform:"rotate( "+-r+"deg )"})})},u=function(){i[0].obj=n,e(),h(),f()};u()},i=function(t){var n=this,i=t,s=$(window),o=$(".site__header"),a=function(){s.on({resize:function(){e()}})},e=function(){var t=o.height();i.height(s.height()-t),i.css({"min-height":i.find(">div:first").height()})},r=function(){i[0].obj=n,a(),e()};r()},s=function(t){var n=this,i=t,s=$(window),o=i.find(".plans__list_caption"),a=i.find(".plans__list-row:not(.plans__list_caption)"),e=[],r=[],h=function(){s.on({load:function(){s.width()>=1024&&f()},resize:function(){s.width()<1024?(o.css({height:""}),a.css({height:""})):f()}})},f=function(){e=[],r=[],o.each(function(){var t=$(this).innerHeight();e.push(t)});var t=Math.max.apply(Math,e);a.each(function(){var t=$(this).innerHeight();r.push(t)});var n=Math.max.apply(Math,r);o.innerHeight(t),a.innerHeight(n)},c=function(){i[0].obj=n,h()};c()}}();
//# sourceMappingURL=data:application/json;base64,
