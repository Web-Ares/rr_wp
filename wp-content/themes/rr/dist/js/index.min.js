"use strict";!function(){$(function(){$.each($(".learn-more"),function(){new t($(this))}),$.each($(".site__anchors"),function(){new n($(this))}),$.each($(".host__offer-date"),function(){new e($(this))})});var t=function(t){var n=this,e=t,o=$("html, body"),i=e,a=function(){i.on({click:function(){return c($(this)),!1}})},c=function(t){var n=t,e=n.parents('[data-more="true"]'),i=e.next(),a=i.offset().top;o.animate({scrollTop:a},300)},f=function(){e[0].obj=n,a()};f()},n=function(t){var n=this,e=t,o=$("html, body"),i=$(window),a=$('[data-anchor="true"]'),c=function(){e.find("a").on({click:function(){return r($(this)),!1}}),i.on({scroll:function(){f()}})},f=function(){var t=i.scrollTop();a.each(function(){var n=$(this),o=n.index(),a=n.offset().top;t+i.height()/2>=a&&n.innerHeight()+a>=t+i.height()/2&&(e.find("a").removeClass("active"),e.find("a").eq(o).addClass("active"))})},r=function(t){var n=t,e=n.index(),i=a.eq(e),c=i.offset().top;o.animate({scrollTop:c},300)},s=function(){e[0].obj=n,c(),f()};s()},e=function(t){var n=this,e=t,o=function(){},i=function(t,n){var o=new Date(t.getTime());(new Date).getHours()>=17&&(new Date).getMinutes()>0&&t.getDay()==n?o.setDate(t.getDate()+(7+n-t.getDay())%7+7):o.setDate(t.getDate()+(7+n-t.getDay())%7),e.html(""+(o.getMonth()+1)+"/"+o.getDate()+"/"+o.getFullYear())},a=function(){e[0].obj=n,o(),i(new Date,5)};a()}}();
"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".popup"),function(){new i($(this))}),$.each($(".site__header"),function(){new e($(this))}),$.each($("#gform_3"),function(){new o($(this))})});var t=function(t){var n=this,o=t,e=o,i=$(window),s=(i.width(),function(){i.on({resize:function(){r(),a()},load:function(){a()},scroll:function(){a()}})}),a=function(){var t,n=o.offset().top,e=n-i.height(),s=n+o.height(),a=(s-i.scrollTop())/(s-e);a>1?t=0:a<0&&(t=1),a<1&&a>0&&(t=1-a),o.hasClass("putted-all")&&(t=.5),c(e,s,t)},c=function(t,n,o){e.each(function(){var t=$(this),n=100,e=1;t.hasClass("clouds_1")&&(e=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*e+"%)",transform:"translateX("+-n*e+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*e+"%)",transform:"translateX("+-n*e+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*e+"%)",transform:"translateX("+200*o*e+"%)"}))})},r=function(){var t=i.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},f=function(){o[0].obj=n,s(),r()};f()},n=function(t){var n=this,o=t,e=o.find(".guy__hand"),i=$(window),s=i.width(),a=function(){i.on({resize:function(){s!=i.width()&&(s=i.width()+1,i.width()<768&&e.css({"-webkit-transform":"none",transform:"none"})),f(),r(),c()},load:function(){i.width()>=768&&c()},scroll:function(){i.width()>=768&&c()}})},c=function(){var t,n=i.height(),s=o.offset().top,a=e.offset().top-n,c=s-n+o.height();o.hasClass("putted")&&(a=e.offset().top-n/2,c=n/2.5);var r=(c-i.scrollTop())/(c-a);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),o.hasClass("putted-all")&&(t=1),u(a,c,t)},r=function(){var t=i.height(),n=i.scrollTop(),s=e.height(),a=e.offset().top;s+a<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},f=function(){var t=i.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},u=function(t,n,o){var s=n-t;e.each(function(){var n=$(this),e=n.data("rotate-start"),a=n.data("rotate-finish"),c=e+(a-e)/s*(i.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-a+"deg )",transform:"rotate( "+-a+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-e+"deg )",transform:"rotate( "+-e+"deg )"}):n.css({"-webkit-transform":"rotate( "+-c+"deg )",transform:"rotate( "+-c+"deg )"})})},d=function(){o[0].obj=n,a(),r(),f()};d()},o=function(t){var n=$(this),o=$("#gform_wrapper_3"),e=t,i=function(){o=o.clone(!0),$(document).bind("gform_confirmation_loaded",function(){setTimeout(function(){$(".gform_confirmation_message").remove(),$(".order__place").append(o),$("#gform_3")[0].reset(),console.log("ddd")},3e3)})},s=function(){e[0].obj=n,i()};n.clone=function(){i()},s()},e=function(t){var n=this,o=t,e=($(window),o.find(".site__header__btn")),i=o.find(".site__header-menu"),s=($(".site__content"),$("html")),a=function(){o.removeClass("opened"),s.css({"overflow-y":"auto"}),i.attr("style","")},c=function(){e.on({click:function(){return o.hasClass("opened")?a():r(),!1}})},r=function(){o.addClass("opened"),s.css({"overflow-y":"hidden"})},f=function(){c(),o[0].obj=n};f()},i=function(t){var n=this,o=40,e=$(".popup__open"),i=t,s=i.find(".popup__close, .popup__cancel"),a=i.find(".popup__wrap"),c=i.find(".popup__content"),r=$("html"),f=$(window),u=setTimeout(function(){},1),d=function(){f.height()-2*o-a.height()>0?a.css({top:(f.height()-2*o-a.height())/2}):a.css({top:0})},l=function(){var t,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),t=n.offsetWidth-n.clientWidth,document.body.removeChild(n),t},h=function(){i.css({overflowY:"hidden"}),r.css({overflowY:"auto",paddingRight:0}),i.removeClass("popup_opened"),i.addClass("popup_hide"),u=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300)},p=function(){i[0].obj=n,m()},m=function(){f.on({resize:function(){d()}}),e.on({click:function(){return _($(this).attr("data-popup")),!1}}),a.on({click:function(t){t.stopPropagation()}}),i.on({click:function(){return h(),!1}}),s.on({click:function(){return h(),!1}})},_=function(t){g(t),r.css({overflowY:"hidden",paddingRight:l()}),i.addClass("popup_opened"),d()},g=function(t){var n=c.filter(".popup__"+t);c.css({display:"none"}),n.css({display:"block"})};p()}}();
//# sourceMappingURL=data:application/json;base64,
