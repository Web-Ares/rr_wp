"use strict";!function(){$(function(){$.each($(".clouds"),function(){new t($(this))}),$.each($(".guy"),function(){new n($(this))}),$.each($(".site__content_full"),function(){new o($(this))}),$.each($(".plans"),function(){new i($(this))}),$.each($(".site__header"),function(){new e($(this))}),$(".popup").each(function(){new s($(this))})});var t=function(t){var n=this,o=t,i=o,e=$(window),s=(e.width(),function(){e.on({resize:function(){r(),a()},load:function(){a()},scroll:function(){a()}})}),a=function(){var t,n=o.offset().top,i=n-e.height(),s=n+o.height(),a=(s-e.scrollTop())/(s-i);a>1?t=0:a<0&&(t=1),a<1&&a>0&&(t=1-a),o.hasClass("putted-all")&&(t=.5),c(i,s,t)},c=function(t,n,o){i.each(function(){var t=$(this),n=100,i=1;t.hasClass("clouds_1")&&(i=-1),0==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):1==o?t.css({"-webkit-transform":"translateX("+-n*i+"%)",transform:"translateX("+-n*i+"%)"}):(o>=.5&&(o=1-o),t.css({"-webkit-transform":"translateX("+200*o*i+"%)",transform:"translateX("+200*o*i+"%)"}))})},r=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},h=function(){o[0].obj=n,s(),r()};h()},n=function(t){var n=this,o=t,i=o.find(".guy__hand"),e=$(window),s=e.width(),a=function(){e.on({resize:function(){s!=e.width()&&(s=e.width()+1,e.width()<768&&i.css({"-webkit-transform":"none",transform:"none"})),h(),r(),c()},load:function(){e.width()>=768&&c()},scroll:function(){e.width()>=768&&c()}})},c=function(){var t,n=e.height(),s=o.offset().top,a=i.offset().top-n,c=s-n+o.height();o.hasClass("putted")&&(a=i.offset().top-n/2,c=n/2.5);var r=(c-e.scrollTop())/(c-a);r>1?t=0:r<0&&(t=1),r<1&&r>0&&(t=1-r),o.hasClass("putted-all")&&(t=1),f(a,c,t)},r=function(){var t=e.height(),n=e.scrollTop(),s=i.height(),a=i.offset().top;s+a<t+n&&$(".site").height()>2*t?o.addClass("putted"):o.removeClass("putted")},h=function(){var t=e.height(),n=$(".site").height();n<=t?o.addClass("putted-all"):o.removeClass("putted-all")},f=function(t,n,o){var s=n-t;i.each(function(){var n=$(this),i=n.data("rotate-start"),a=n.data("rotate-finish"),c=i+(a-i)/s*(e.scrollTop()-t);1==o?n.css({"-webkit-transform":"rotate( "+-a+"deg )",transform:"rotate( "+-a+"deg )"}):0==o?n.css({"-webkit-transform":"rotate( "+-i+"deg )",transform:"rotate( "+-i+"deg )"}):n.css({"-webkit-transform":"rotate( "+-c+"deg )",transform:"rotate( "+-c+"deg )"})})},u=function(){o[0].obj=n,a(),r(),h()};u()},o=function(t){var n=this,o=t,i=$(window),e=$(".site__header"),s=function(){i.on({resize:function(){a()}})},a=function(){var t=e.height();o.height(i.height()-t),o.css({"min-height":o.find(">div:first").height()})},c=function(){o[0].obj=n,s(),a()};c()},i=function(t){var n=this,o=t,i=$(window),e=o.find(".plans__list_caption"),s=o.find(".plans__list-row:not(.plans__list_caption)"),a=[],c=[],r=function(){i.on({load:function(){i.width()>=1024&&h()},resize:function(){i.width()<1024?(e.css({height:""}),s.css({height:""})):h()}})},h=function(){a=[],c=[],e.each(function(){var t=$(this).innerHeight();a.push(t)});var t=Math.max.apply(Math,a);s.each(function(){var t=$(this).innerHeight();c.push(t)});var n=Math.max.apply(Math,c);e.innerHeight(t),s.innerHeight(n)},f=function(){o[0].obj=n,r()};f()},e=function(t){var n=this,o=t,i=$(window),e=o.find(".site__header__btn"),s=o.find(".site__header-menu"),a=$("html"),c=function(){o.removeClass("opened"),a.css({"overflow-y":"auto"}),s.attr("style","")},r=function(){i.on({scroll:function(){i.scrollTop()>0?o.addClass("fixed"):o.removeClass("fixed")},resize:function(){}}),e.on({click:function(){return o.hasClass("opened")?c():h(),!1}})},h=function(){o.addClass("opened"),a.css({"overflow-y":"hidden"})},f=function(){r(),o[0].obj=n,i.scrollTop()>o.innerHeight()/2?o.addClass("fixed"):o.removeClass("fixed")};f()},s=function(t){var n=this,o=40,i=$(".popup__open"),e=t,s=e.find(".popup__close, .popup__cancel"),a=e.find(".popup__wrap"),c=e.find(".popup__content"),r=$("html"),h=$(window),f=setTimeout(function(){},1),u=function(){h.height()-2*o-a.height()>0?a.css({top:(h.height()-2*o-a.height())/2}):a.css({top:0})},d=function(){var t,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),t=n.offsetWidth-n.clientWidth,document.body.removeChild(n),t},l=function(){e.css({overflowY:"hidden"}),r.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),f=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},p=function(){e[0].obj=n,w()},w=function(){h.on({resize:function(){u()}}),i.on({click:function(){return _($(this).attr("data-popup")),!1}}),a.on({click:function(t){t.stopPropagation()}}),e.on({click:function(){return l(),!1}}),s.on({click:function(){return l(),!1}})},_=function(t){g(t),r.css({overflowY:"hidden",paddingRight:d()}),e.addClass("popup_opened"),u()},g=function(t){var n=c.filter(".popup__"+t);c.css({display:"none"}),n.css({display:"block"})};p()}}();
"use strict";!function(){$(function(){$.each($(".confirmation"),function(){new e($(this))})});var e=function(e){var a,n,o,s=this,i=e,r=i.find(".confirmation__data-paste"),t=function(){var e="",s="",i=[];for(var t in a)var c=a[t]+", ";void 0!=a.ratePlan&&$.each(a.ratePlan,function(){var n=a.ratePlan.value.split(" ");if("session pricing"===a.ratePlan.sessionType)e="<span>"+a.ratePlan.sessionType+" ("+n[0]+" sessions)</span>, ";else if("minute pricing"===a.ratePlan.sessionType){var o=n[0].replace(/[^0-9]+/g,"");o>1e5&&(o=o/1e6+"M"),e="<span>"+a.ratePlan.sessionType+" ("+o+" minutes ("+n[2]+"/minute)</span>, "}}),""==e&&(e="");for(var l in n)i.push(l);i.length>0&&(s=1==i.length?"+ "+i.length+" service":"+ "+i.length+" service");var p="";for(var h in o)p=o.hasOwnProperty(h)?o[h]+" ":"";""==e?r.html("You chose "+c+"ports: "+p+s+"."):r.html("You chose "+e+c+s+").")},c=function(){void 0!=localStorage.radioChoose?(a=JSON.parse(localStorage.radioChoose),n=JSON.parse(localStorage.checkboxChoose),o=JSON.parse(localStorage.inputValue),t()):window.location.href=$("body").data("src")},l=function(){i[0].obj=s,c()};l()}}();
//# sourceMappingURL=data:application/json;base64,
